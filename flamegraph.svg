<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="41169"><g><title>flamegraph_benchmark`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::cmp::PartialEq&gt;::eq (58 samples, 0.14%)</title><rect x="0.0000%" y="181" width="0.1409%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="58"/><text x="0.2500%" y="191.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (345 samples, 0.84%)</title><rect x="0.1409%" y="181" width="0.8380%" height="15" fill="rgb(217,0,24)" fg:x="58" fg:w="345"/><text x="0.3909%" y="191.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$free (5 samples, 0.01%)</title><rect x="0.9789%" y="181" width="0.0121%" height="15" fill="rgb(221,193,54)" fg:x="403" fg:w="5"/><text x="1.2289%" y="191.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$memcmp (59 samples, 0.14%)</title><rect x="0.9910%" y="181" width="0.1433%" height="15" fill="rgb(248,212,6)" fg:x="408" fg:w="59"/><text x="1.2410%" y="191.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (208 samples, 0.51%)</title><rect x="24.5282%" y="165" width="0.5052%" height="15" fill="rgb(208,68,35)" fg:x="10098" fg:w="208"/><text x="24.7782%" y="175.50"></text></g><g><title>flamegraph_benchmark`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.29%)</title><rect x="25.0334%" y="165" width="0.2939%" height="15" fill="rgb(232,128,0)" fg:x="10306" fg:w="121"/><text x="25.2834%" y="175.50"></text></g><g><title>flamegraph_benchmark`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::cmp::PartialEq&gt;::eq (95 samples, 0.23%)</title><rect x="25.3273%" y="165" width="0.2308%" height="15" fill="rgb(207,160,47)" fg:x="10427" fg:w="95"/><text x="25.5773%" y="175.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (280 samples, 0.68%)</title><rect x="25.5581%" y="165" width="0.6801%" height="15" fill="rgb(228,23,34)" fg:x="10522" fg:w="280"/><text x="25.8081%" y="175.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (55 samples, 0.13%)</title><rect x="26.1046%" y="149" width="0.1336%" height="15" fill="rgb(218,30,26)" fg:x="10747" fg:w="55"/><text x="26.3546%" y="159.50"></text></g><g><title>flamegraph_benchmark`&lt;rand_hc::hc128::Hc128Core as rand_core::block::BlockRngCore&gt;::generate (17 samples, 0.04%)</title><rect x="26.2382%" y="165" width="0.0413%" height="15" fill="rgb(220,122,19)" fg:x="10802" fg:w="17"/><text x="26.4882%" y="175.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$memcmp (121 samples, 0.29%)</title><rect x="26.2795%" y="165" width="0.2939%" height="15" fill="rgb(250,228,42)" fg:x="10819" fg:w="121"/><text x="26.5295%" y="175.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7 samples, 0.02%)</title><rect x="26.5734%" y="165" width="0.0170%" height="15" fill="rgb(240,193,28)" fg:x="10940" fg:w="7"/><text x="26.8234%" y="175.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (7 samples, 0.02%)</title><rect x="26.5734%" y="149" width="0.0170%" height="15" fill="rgb(216,20,37)" fg:x="10940" fg:w="7"/><text x="26.8234%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.02%)</title><rect x="26.5734%" y="133" width="0.0170%" height="15" fill="rgb(206,188,39)" fg:x="10940" fg:w="7"/><text x="26.8234%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 0.02%)</title><rect x="26.5734%" y="117" width="0.0170%" height="15" fill="rgb(217,207,13)" fg:x="10940" fg:w="7"/><text x="26.8234%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.02%)</title><rect x="26.5734%" y="101" width="0.0170%" height="15" fill="rgb(231,73,38)" fg:x="10940" fg:w="7"/><text x="26.8234%" y="111.50"></text></g><g><title>flamegraph_benchmark`core::hash::BuildHasher::hash_one (19 samples, 0.05%)</title><rect x="26.5904%" y="165" width="0.0462%" height="15" fill="rgb(225,20,46)" fg:x="10947" fg:w="19"/><text x="26.8404%" y="175.50"></text></g><g><title>flamegraph_benchmark`core::hash::Hasher::write_str (299 samples, 0.73%)</title><rect x="26.6365%" y="165" width="0.7263%" height="15" fill="rgb(210,31,41)" fg:x="10966" fg:w="299"/><text x="26.8865%" y="175.50"></text></g><g><title>flamegraph_benchmark`core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (1,523 samples, 3.70%)</title><rect x="27.3628%" y="165" width="3.6994%" height="15" fill="rgb(221,200,47)" fg:x="11265" fg:w="1523"/><text x="27.6128%" y="175.50">flam..</text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.01%)</title><rect x="31.0622%" y="149" width="0.0146%" height="15" fill="rgb(226,26,5)" fg:x="12788" fg:w="6"/><text x="31.3122%" y="159.50"></text></g><g><title>flamegraph_benchmark`core::ptr::drop_in_place&lt;minecraft_schematic_utils::region::Region&gt; (7 samples, 0.02%)</title><rect x="31.0622%" y="165" width="0.0170%" height="15" fill="rgb(249,33,26)" fg:x="12788" fg:w="7"/><text x="31.3122%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (78 samples, 0.19%)</title><rect x="31.0889%" y="133" width="0.1895%" height="15" fill="rgb(235,183,28)" fg:x="12799" fg:w="78"/><text x="31.3389%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (12 samples, 0.03%)</title><rect x="31.2832%" y="133" width="0.0291%" height="15" fill="rgb(221,5,38)" fg:x="12879" fg:w="12"/><text x="31.5332%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.03%)</title><rect x="31.2832%" y="117" width="0.0291%" height="15" fill="rgb(247,18,42)" fg:x="12879" fg:w="12"/><text x="31.5332%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (139 samples, 0.34%)</title><rect x="31.0841%" y="149" width="0.3376%" height="15" fill="rgb(241,131,45)" fg:x="12797" fg:w="139"/><text x="31.3341%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (45 samples, 0.11%)</title><rect x="31.3124%" y="133" width="0.1093%" height="15" fill="rgb(249,31,29)" fg:x="12891" fg:w="45"/><text x="31.5624%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (43 samples, 0.10%)</title><rect x="31.3173%" y="117" width="0.1044%" height="15" fill="rgb(225,111,53)" fg:x="12893" fg:w="43"/><text x="31.5673%" y="127.50"></text></g><g><title>flamegraph_benchmark`core::ptr::drop_in_place&lt;minecraft_schematic_utils::universal_schematic::UniversalSchematic&gt; (146 samples, 0.35%)</title><rect x="31.0792%" y="165" width="0.3546%" height="15" fill="rgb(238,160,17)" fg:x="12795" fg:w="146"/><text x="31.3292%" y="175.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (7 samples, 0.02%)</title><rect x="31.4994%" y="85" width="0.0170%" height="15" fill="rgb(214,148,48)" fg:x="12968" fg:w="7"/><text x="31.7494%" y="95.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.01%)</title><rect x="31.5043%" y="69" width="0.0121%" height="15" fill="rgb(232,36,49)" fg:x="12970" fg:w="5"/><text x="31.7543%" y="79.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (24 samples, 0.06%)</title><rect x="31.4630%" y="133" width="0.0583%" height="15" fill="rgb(209,103,24)" fg:x="12953" fg:w="24"/><text x="31.7130%" y="143.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (20 samples, 0.05%)</title><rect x="31.4727%" y="117" width="0.0486%" height="15" fill="rgb(229,88,8)" fg:x="12957" fg:w="20"/><text x="31.7227%" y="127.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (14 samples, 0.03%)</title><rect x="31.4873%" y="101" width="0.0340%" height="15" fill="rgb(213,181,19)" fg:x="12963" fg:w="14"/><text x="31.7373%" y="111.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::driftsort_main (37 samples, 0.09%)</title><rect x="31.4338%" y="165" width="0.0899%" height="15" fill="rgb(254,191,54)" fg:x="12941" fg:w="37"/><text x="31.6838%" y="175.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::drift::sort (37 samples, 0.09%)</title><rect x="31.4338%" y="149" width="0.0899%" height="15" fill="rgb(241,83,37)" fg:x="12941" fg:w="37"/><text x="31.6838%" y="159.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (240 samples, 0.58%)</title><rect x="31.5261%" y="165" width="0.5830%" height="15" fill="rgb(233,36,39)" fg:x="12979" fg:w="240"/><text x="31.7761%" y="175.50"></text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTableInner::drop_inner_table (88 samples, 0.21%)</title><rect x="32.1091%" y="165" width="0.2138%" height="15" fill="rgb(226,3,54)" fg:x="13219" fg:w="88"/><text x="32.3591%" y="175.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::decompress (20 samples, 0.05%)</title><rect x="32.7237%" y="101" width="0.0486%" height="15" fill="rgb(245,192,40)" fg:x="13472" fg:w="20"/><text x="32.9737%" y="111.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::transfer (19 samples, 0.05%)</title><rect x="32.7261%" y="85" width="0.0462%" height="15" fill="rgb(238,167,29)" fg:x="13473" fg:w="19"/><text x="32.9761%" y="95.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (21 samples, 0.05%)</title><rect x="32.7237%" y="149" width="0.0510%" height="15" fill="rgb(232,182,51)" fg:x="13472" fg:w="21"/><text x="32.9737%" y="159.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (21 samples, 0.05%)</title><rect x="32.7237%" y="133" width="0.0510%" height="15" fill="rgb(231,60,39)" fg:x="13472" fg:w="21"/><text x="32.9737%" y="143.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::stream::inflate_loop (21 samples, 0.05%)</title><rect x="32.7237%" y="117" width="0.0510%" height="15" fill="rgb(208,69,12)" fg:x="13472" fg:w="21"/><text x="32.9737%" y="127.50"></text></g><g><title>flamegraph_benchmark`flate2::crc::Crc::update (12 samples, 0.03%)</title><rect x="32.7771%" y="149" width="0.0291%" height="15" fill="rgb(235,93,37)" fg:x="13494" fg:w="12"/><text x="33.0271%" y="159.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (77 samples, 0.19%)</title><rect x="32.8062%" y="149" width="0.1870%" height="15" fill="rgb(213,116,39)" fg:x="13506" fg:w="77"/><text x="33.0562%" y="159.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (510 samples, 1.24%)</title><rect x="32.9981%" y="149" width="1.2388%" height="15" fill="rgb(222,207,29)" fg:x="13585" fg:w="510"/><text x="33.2481%" y="159.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (47 samples, 0.11%)</title><rect x="34.1228%" y="133" width="0.1142%" height="15" fill="rgb(206,96,30)" fg:x="14048" fg:w="47"/><text x="34.3728%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.05%)</title><rect x="34.1835%" y="117" width="0.0534%" height="15" fill="rgb(218,138,4)" fg:x="14073" fg:w="22"/><text x="34.4335%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.05%)</title><rect x="34.1908%" y="101" width="0.0462%" height="15" fill="rgb(250,191,14)" fg:x="14076" fg:w="19"/><text x="34.4408%" y="111.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::unpack_block_states (234 samples, 0.57%)</title><rect x="34.2369%" y="149" width="0.5684%" height="15" fill="rgb(239,60,40)" fg:x="14095" fg:w="234"/><text x="34.4869%" y="159.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (9 samples, 0.02%)</title><rect x="34.8053%" y="149" width="0.0219%" height="15" fill="rgb(206,27,48)" fg:x="14329" fg:w="9"/><text x="35.0553%" y="159.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (9 samples, 0.02%)</title><rect x="34.8053%" y="133" width="0.0219%" height="15" fill="rgb(225,35,8)" fg:x="14329" fg:w="9"/><text x="35.0553%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.02%)</title><rect x="34.8077%" y="117" width="0.0194%" height="15" fill="rgb(250,213,24)" fg:x="14330" fg:w="8"/><text x="35.0577%" y="127.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::litematic::from_litematic (1,042 samples, 2.53%)</title><rect x="32.3229%" y="165" width="2.5310%" height="15" fill="rgb(247,123,22)" fg:x="13307" fg:w="1042"/><text x="32.5729%" y="175.50">fl..</text></g><g><title>libsystem_malloc.dylib`_szone_free (11 samples, 0.03%)</title><rect x="34.8272%" y="149" width="0.0267%" height="15" fill="rgb(231,138,38)" fg:x="14338" fg:w="11"/><text x="35.0772%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (11 samples, 0.03%)</title><rect x="34.8272%" y="133" width="0.0267%" height="15" fill="rgb(231,145,46)" fg:x="14338" fg:w="11"/><text x="35.0772%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (11 samples, 0.03%)</title><rect x="34.8272%" y="117" width="0.0267%" height="15" fill="rgb(251,118,11)" fg:x="14338" fg:w="11"/><text x="35.0772%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (11 samples, 0.03%)</title><rect x="34.8272%" y="101" width="0.0267%" height="15" fill="rgb(217,147,25)" fg:x="14338" fg:w="11"/><text x="35.0772%" y="111.50"></text></g><g><title>flamegraph_benchmark`flate2::crc::Crc::update (20 samples, 0.05%)</title><rect x="36.9671%" y="85" width="0.0486%" height="15" fill="rgb(247,81,37)" fg:x="15219" fg:w="20"/><text x="37.2171%" y="95.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::compress_inner (158 samples, 0.38%)</title><rect x="37.1396%" y="53" width="0.3838%" height="15" fill="rgb(209,12,38)" fg:x="15290" fg:w="158"/><text x="37.3896%" y="63.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::flush_output_buffer (5 samples, 0.01%)</title><rect x="37.5112%" y="37" width="0.0121%" height="15" fill="rgb(227,1,9)" fg:x="15443" fg:w="5"/><text x="37.7612%" y="47.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (200 samples, 0.49%)</title><rect x="37.0570%" y="69" width="0.4858%" height="15" fill="rgb(248,47,43)" fg:x="15256" fg:w="200"/><text x="37.3070%" y="79.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::flush_output_buffer (8 samples, 0.02%)</title><rect x="37.5234%" y="53" width="0.0194%" height="15" fill="rgb(221,10,30)" fg:x="15448" fg:w="8"/><text x="37.7734%" y="63.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::compress_inner (18 samples, 0.04%)</title><rect x="37.5452%" y="69" width="0.0437%" height="15" fill="rgb(210,229,1)" fg:x="15457" fg:w="18"/><text x="37.7952%" y="79.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_tag_body (3,037 samples, 7.38%)</title><rect x="36.9647%" y="101" width="7.3769%" height="15" fill="rgb(222,148,37)" fg:x="15218" fg:w="3037"/><text x="37.2147%" y="111.50">flamegraph..</text></g><g><title>flamegraph_benchmark`std::io::Write::write_all (3,016 samples, 7.33%)</title><rect x="37.0157%" y="85" width="7.3259%" height="15" fill="rgb(234,67,33)" fg:x="15239" fg:w="3016"/><text x="37.2657%" y="95.50">flamegraph..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2,780 samples, 6.75%)</title><rect x="37.5890%" y="69" width="6.7527%" height="15" fill="rgb(247,98,35)" fg:x="15475" fg:w="2780"/><text x="37.8390%" y="79.50">libsystem..</text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_nbt (3,043 samples, 7.39%)</title><rect x="36.9647%" y="149" width="7.3915%" height="15" fill="rgb(247,138,52)" fg:x="15218" fg:w="3043"/><text x="37.2147%" y="159.50">flamegraph..</text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_tag_body (3,043 samples, 7.39%)</title><rect x="36.9647%" y="133" width="7.3915%" height="15" fill="rgb(213,79,30)" fg:x="15218" fg:w="3043"/><text x="37.2147%" y="143.50">flamegraph..</text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_tag_body (3,043 samples, 7.39%)</title><rect x="36.9647%" y="117" width="7.3915%" height="15" fill="rgb(246,177,23)" fg:x="15218" fg:w="3043"/><text x="37.2147%" y="127.50">flamegraph..</text></g><g><title>flamegraph_benchmark`std::io::Write::write_all (6 samples, 0.01%)</title><rect x="44.3416%" y="101" width="0.0146%" height="15" fill="rgb(230,62,27)" fg:x="18255" fg:w="6"/><text x="44.5916%" y="111.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::litematic::to_litematic (3,918 samples, 9.52%)</title><rect x="34.8539%" y="165" width="9.5169%" height="15" fill="rgb(216,154,8)" fg:x="14349" fg:w="3918"/><text x="35.1039%" y="175.50">flamegraph_ben..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.01%)</title><rect x="44.3562%" y="149" width="0.0146%" height="15" fill="rgb(244,35,45)" fg:x="18261" fg:w="6"/><text x="44.6062%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.01%)</title><rect x="44.3562%" y="133" width="0.0146%" height="15" fill="rgb(251,115,12)" fg:x="18261" fg:w="6"/><text x="44.6062%" y="143.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::schematic::parse_block_data (140 samples, 0.34%)</title><rect x="44.3708%" y="165" width="0.3401%" height="15" fill="rgb(240,54,50)" fg:x="18267" fg:w="140"/><text x="44.6208%" y="175.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$malloc (36 samples, 0.09%)</title><rect x="47.6524%" y="117" width="0.0874%" height="15" fill="rgb(233,84,52)" fg:x="19618" fg:w="36"/><text x="47.9024%" y="127.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (510 samples, 1.24%)</title><rect x="47.7398%" y="117" width="1.2388%" height="15" fill="rgb(207,117,47)" fg:x="19654" fg:w="510"/><text x="47.9898%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (466 samples, 1.13%)</title><rect x="47.8467%" y="101" width="1.1319%" height="15" fill="rgb(249,43,39)" fg:x="19698" fg:w="466"/><text x="48.0967%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (203 samples, 0.49%)</title><rect x="48.9786%" y="117" width="0.4931%" height="15" fill="rgb(209,38,44)" fg:x="20164" fg:w="203"/><text x="49.2286%" y="127.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (881 samples, 2.14%)</title><rect x="47.3342%" y="133" width="2.1400%" height="15" fill="rgb(236,212,23)" fg:x="19487" fg:w="881"/><text x="47.5842%" y="143.50">f..</text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (56 samples, 0.14%)</title><rect x="49.4741%" y="133" width="0.1360%" height="15" fill="rgb(242,79,21)" fg:x="20368" fg:w="56"/><text x="49.7241%" y="143.50"></text></g><g><title>flamegraph_benchmark`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,320 samples, 5.64%)</title><rect x="45.1529%" y="149" width="5.6353%" height="15" fill="rgb(211,96,35)" fg:x="18589" fg:w="2320"/><text x="45.4029%" y="159.50">flamegr..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (485 samples, 1.18%)</title><rect x="49.6101%" y="133" width="1.1781%" height="15" fill="rgb(253,215,40)" fg:x="20424" fg:w="485"/><text x="49.8601%" y="143.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$free (41 samples, 0.10%)</title><rect x="50.7882%" y="149" width="0.0996%" height="15" fill="rgb(211,81,21)" fg:x="20909" fg:w="41"/><text x="51.0382%" y="159.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (78 samples, 0.19%)</title><rect x="50.8878%" y="149" width="0.1895%" height="15" fill="rgb(208,190,38)" fg:x="20950" fg:w="78"/><text x="51.1378%" y="159.50"></text></g><g><title>flamegraph_benchmark`core::ptr::drop_in_place&lt;minecraft_schematic_utils::region::Region&gt; (5 samples, 0.01%)</title><rect x="51.0797%" y="149" width="0.0121%" height="15" fill="rgb(235,213,38)" fg:x="21029" fg:w="5"/><text x="51.3297%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.01%)</title><rect x="51.0797%" y="133" width="0.0121%" height="15" fill="rgb(237,122,38)" fg:x="21029" fg:w="5"/><text x="51.3297%" y="143.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::get_merged_region (7 samples, 0.02%)</title><rect x="51.0967%" y="149" width="0.0170%" height="15" fill="rgb(244,218,35)" fg:x="21036" fg:w="7"/><text x="51.3467%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.02%)</title><rect x="51.0967%" y="133" width="0.0170%" height="15" fill="rgb(240,68,47)" fg:x="21036" fg:w="7"/><text x="51.3467%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.01%)</title><rect x="51.0991%" y="117" width="0.0146%" height="15" fill="rgb(210,16,53)" fg:x="21037" fg:w="6"/><text x="51.3491%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.01%)</title><rect x="51.1016%" y="101" width="0.0121%" height="15" fill="rgb(235,124,12)" fg:x="21038" fg:w="5"/><text x="51.3516%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.01%)</title><rect x="51.1016%" y="85" width="0.0121%" height="15" fill="rgb(224,169,11)" fg:x="21038" fg:w="5"/><text x="51.3516%" y="95.50"></text></g><g><title>flamegraph_benchmark`flate2::crc::Crc::update (26 samples, 0.06%)</title><rect x="51.1137%" y="117" width="0.0632%" height="15" fill="rgb(250,166,2)" fg:x="21043" fg:w="26"/><text x="51.3637%" y="127.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_nbt (320 samples, 0.78%)</title><rect x="51.1137%" y="149" width="0.7773%" height="15" fill="rgb(242,216,29)" fg:x="21043" fg:w="320"/><text x="51.3637%" y="159.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_tag_body (320 samples, 0.78%)</title><rect x="51.1137%" y="133" width="0.7773%" height="15" fill="rgb(230,116,27)" fg:x="21043" fg:w="320"/><text x="51.3637%" y="143.50"></text></g><g><title>flamegraph_benchmark`std::io::Write::write_all (294 samples, 0.71%)</title><rect x="51.1769%" y="117" width="0.7141%" height="15" fill="rgb(228,99,48)" fg:x="21069" fg:w="294"/><text x="51.4269%" y="127.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (294 samples, 0.71%)</title><rect x="51.1769%" y="101" width="0.7141%" height="15" fill="rgb(253,11,6)" fg:x="21069" fg:w="294"/><text x="51.4269%" y="111.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::compress_inner (294 samples, 0.71%)</title><rect x="51.1769%" y="85" width="0.7141%" height="15" fill="rgb(247,143,39)" fg:x="21069" fg:w="294"/><text x="51.4269%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_free (208 samples, 0.51%)</title><rect x="51.8934%" y="149" width="0.5052%" height="15" fill="rgb(236,97,10)" fg:x="21364" fg:w="208"/><text x="52.1434%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (58 samples, 0.14%)</title><rect x="52.4035%" y="149" width="0.1409%" height="15" fill="rgb(233,208,19)" fg:x="21574" fg:w="58"/><text x="52.6535%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (10 samples, 0.02%)</title><rect x="52.5444%" y="149" width="0.0243%" height="15" fill="rgb(216,164,2)" fg:x="21632" fg:w="10"/><text x="52.7944%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (7 samples, 0.02%)</title><rect x="52.5517%" y="133" width="0.0170%" height="15" fill="rgb(220,129,5)" fg:x="21635" fg:w="7"/><text x="52.8017%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (7 samples, 0.02%)</title><rect x="52.5517%" y="117" width="0.0170%" height="15" fill="rgb(242,17,10)" fg:x="21635" fg:w="7"/><text x="52.8017%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.02%)</title><rect x="52.5517%" y="101" width="0.0170%" height="15" fill="rgb(242,107,0)" fg:x="21635" fg:w="7"/><text x="52.8017%" y="111.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::schematic::to_schematic (3,265 samples, 7.93%)</title><rect x="44.7108%" y="165" width="7.9307%" height="15" fill="rgb(251,28,31)" fg:x="18407" fg:w="3265"/><text x="44.9608%" y="175.50">flamegraph_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.07%)</title><rect x="52.5711%" y="149" width="0.0704%" height="15" fill="rgb(233,223,10)" fg:x="21643" fg:w="29"/><text x="52.8211%" y="159.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::get_block_index (35 samples, 0.09%)</title><rect x="52.6416%" y="165" width="0.0850%" height="15" fill="rgb(215,21,27)" fg:x="21672" fg:w="35"/><text x="52.8916%" y="175.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (118 samples, 0.29%)</title><rect x="54.5969%" y="149" width="0.2866%" height="15" fill="rgb(232,23,21)" fg:x="22477" fg:w="118"/><text x="54.8469%" y="159.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (243 samples, 0.59%)</title><rect x="54.8835%" y="149" width="0.5902%" height="15" fill="rgb(244,5,23)" fg:x="22595" fg:w="243"/><text x="55.1335%" y="159.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (73 samples, 0.18%)</title><rect x="55.2965%" y="133" width="0.1773%" height="15" fill="rgb(226,81,46)" fg:x="22765" fg:w="73"/><text x="55.5465%" y="143.50"></text></g><g><title>flamegraph_benchmark`core::hash::Hasher::write_str (602 samples, 1.46%)</title><rect x="55.4738%" y="149" width="1.4623%" height="15" fill="rgb(247,70,30)" fg:x="22838" fg:w="602"/><text x="55.7238%" y="159.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block (1,783 samples, 4.33%)</title><rect x="52.7266%" y="165" width="4.3309%" height="15" fill="rgb(212,68,19)" fg:x="21707" fg:w="1783"/><text x="52.9766%" y="175.50">flame..</text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTableInner::drop_inner_table (50 samples, 0.12%)</title><rect x="56.9360%" y="149" width="0.1215%" height="15" fill="rgb(240,187,13)" fg:x="23440" fg:w="50"/><text x="57.1860%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.01%)</title><rect x="64.6190%" y="117" width="0.0121%" height="15" fill="rgb(223,113,26)" fg:x="26603" fg:w="5"/><text x="64.8690%" y="127.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (144 samples, 0.35%)</title><rect x="64.4344%" y="149" width="0.3498%" height="15" fill="rgb(206,192,2)" fg:x="26527" fg:w="144"/><text x="64.6844%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 0.17%)</title><rect x="64.6190%" y="133" width="0.1652%" height="15" fill="rgb(241,108,4)" fg:x="26603" fg:w="68"/><text x="64.8690%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (63 samples, 0.15%)</title><rect x="64.6312%" y="117" width="0.1530%" height="15" fill="rgb(247,173,49)" fg:x="26608" fg:w="63"/><text x="64.8812%" y="127.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (3,182 samples, 7.73%)</title><rect x="57.0575%" y="165" width="7.7291%" height="15" fill="rgb(224,114,35)" fg:x="23490" fg:w="3182"/><text x="57.3075%" y="175.50">flamegraph_..</text></g><g><title>flamegraph_benchmark`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (524 samples, 1.27%)</title><rect x="65.4376%" y="149" width="1.2728%" height="15" fill="rgb(245,159,27)" fg:x="26940" fg:w="524"/><text x="65.6876%" y="159.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::set_block (1,334 samples, 3.24%)</title><rect x="64.7915%" y="165" width="3.2403%" height="15" fill="rgb(245,172,44)" fg:x="26674" fg:w="1334"/><text x="65.0415%" y="175.50">fla..</text></g><g><title>flamegraph_benchmark`core::hash::BuildHasher::hash_one (544 samples, 1.32%)</title><rect x="66.7104%" y="149" width="1.3214%" height="15" fill="rgb(236,23,11)" fg:x="27464" fg:w="544"/><text x="66.9604%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.02%)</title><rect x="79.7202%" y="85" width="0.0194%" height="15" fill="rgb(205,117,38)" fg:x="32820" fg:w="8"/><text x="79.9702%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (8 samples, 0.02%)</title><rect x="79.7202%" y="69" width="0.0194%" height="15" fill="rgb(237,72,25)" fg:x="32820" fg:w="8"/><text x="79.9702%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (8 samples, 0.02%)</title><rect x="79.7202%" y="53" width="0.0194%" height="15" fill="rgb(244,70,9)" fg:x="32820" fg:w="8"/><text x="79.9702%" y="63.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9 samples, 0.02%)</title><rect x="79.7202%" y="149" width="0.0219%" height="15" fill="rgb(217,125,39)" fg:x="32820" fg:w="9"/><text x="79.9702%" y="159.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (9 samples, 0.02%)</title><rect x="79.7202%" y="133" width="0.0219%" height="15" fill="rgb(235,36,10)" fg:x="32820" fg:w="9"/><text x="79.9702%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (9 samples, 0.02%)</title><rect x="79.7202%" y="117" width="0.0219%" height="15" fill="rgb(251,123,47)" fg:x="32820" fg:w="9"/><text x="79.9702%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (9 samples, 0.02%)</title><rect x="79.7202%" y="101" width="0.0219%" height="15" fill="rgb(221,13,13)" fg:x="32820" fg:w="9"/><text x="79.9702%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (48 samples, 0.12%)</title><rect x="79.7906%" y="101" width="0.1166%" height="15" fill="rgb(238,131,9)" fg:x="32849" fg:w="48"/><text x="80.0406%" y="111.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::split_into_chunks (4,894 samples, 11.89%)</title><rect x="68.0318%" y="165" width="11.8876%" height="15" fill="rgb(211,50,8)" fg:x="28008" fg:w="4894"/><text x="68.2818%" y="175.50">flamegraph_benchma..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (73 samples, 0.18%)</title><rect x="79.7420%" y="149" width="0.1773%" height="15" fill="rgb(245,182,24)" fg:x="32829" fg:w="73"/><text x="79.9920%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (70 samples, 0.17%)</title><rect x="79.7493%" y="133" width="0.1700%" height="15" fill="rgb(242,14,37)" fg:x="32832" fg:w="70"/><text x="79.9993%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (63 samples, 0.15%)</title><rect x="79.7663%" y="117" width="0.1530%" height="15" fill="rgb(246,228,12)" fg:x="32839" fg:w="63"/><text x="80.0163%" y="127.50"></text></g><g><title>flamegraph_benchmark`flate2::crc::Crc::update (27 samples, 0.07%)</title><rect x="79.9194%" y="133" width="0.0656%" height="15" fill="rgb(213,55,15)" fg:x="32902" fg:w="27"/><text x="80.1694%" y="143.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::stream::inflate_loop (58 samples, 0.14%)</title><rect x="79.9849%" y="101" width="0.1409%" height="15" fill="rgb(209,9,3)" fg:x="32929" fg:w="58"/><text x="80.2349%" y="111.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::decompress (58 samples, 0.14%)</title><rect x="79.9849%" y="85" width="0.1409%" height="15" fill="rgb(230,59,30)" fg:x="32929" fg:w="58"/><text x="80.2349%" y="95.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::transfer (52 samples, 0.13%)</title><rect x="79.9995%" y="69" width="0.1263%" height="15" fill="rgb(209,121,21)" fg:x="32935" fg:w="52"/><text x="80.2495%" y="79.50"></text></g><g><title>flamegraph_benchmark`std::io::default_read_exact (59 samples, 0.14%)</title><rect x="79.9849%" y="133" width="0.1433%" height="15" fill="rgb(220,109,13)" fg:x="32929" fg:w="59"/><text x="80.2349%" y="143.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (59 samples, 0.14%)</title><rect x="79.9849%" y="117" width="0.1433%" height="15" fill="rgb(232,18,1)" fg:x="32929" fg:w="59"/><text x="80.2349%" y="127.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (91 samples, 0.22%)</title><rect x="79.9194%" y="165" width="0.2210%" height="15" fill="rgb(215,41,42)" fg:x="32902" fg:w="91"/><text x="80.1694%" y="175.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (91 samples, 0.22%)</title><rect x="79.9194%" y="149" width="0.2210%" height="15" fill="rgb(224,123,36)" fg:x="32902" fg:w="91"/><text x="80.1694%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.01%)</title><rect x="80.1283%" y="133" width="0.0121%" height="15" fill="rgb(240,125,3)" fg:x="32988" fg:w="5"/><text x="80.3783%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (5 samples, 0.01%)</title><rect x="80.1283%" y="117" width="0.0121%" height="15" fill="rgb(205,98,50)" fg:x="32988" fg:w="5"/><text x="80.3783%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.01%)</title><rect x="80.3129%" y="133" width="0.0121%" height="15" fill="rgb(205,185,37)" fg:x="33064" fg:w="5"/><text x="80.5629%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.01%)</title><rect x="80.3250%" y="133" width="0.0121%" height="15" fill="rgb(238,207,15)" fg:x="33069" fg:w="5"/><text x="80.5750%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.03%)</title><rect x="80.3493%" y="117" width="0.0316%" height="15" fill="rgb(213,199,42)" fg:x="33079" fg:w="13"/><text x="80.5993%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.05%)</title><rect x="80.3906%" y="117" width="0.0510%" height="15" fill="rgb(235,201,11)" fg:x="33096" fg:w="21"/><text x="80.6406%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.03%)</title><rect x="80.4100%" y="101" width="0.0316%" height="15" fill="rgb(207,46,11)" fg:x="33104" fg:w="13"/><text x="80.6600%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.02%)</title><rect x="80.4222%" y="85" width="0.0194%" height="15" fill="rgb(241,35,35)" fg:x="33109" fg:w="8"/><text x="80.6722%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (52 samples, 0.13%)</title><rect x="80.3371%" y="133" width="0.1263%" height="15" fill="rgb(243,32,47)" fg:x="33074" fg:w="52"/><text x="80.5871%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.02%)</title><rect x="80.4416%" y="117" width="0.0219%" height="15" fill="rgb(247,202,23)" fg:x="33117" fg:w="9"/><text x="80.6916%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (5 samples, 0.01%)</title><rect x="80.4635%" y="133" width="0.0121%" height="15" fill="rgb(219,102,11)" fg:x="33126" fg:w="5"/><text x="80.7135%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (9 samples, 0.02%)</title><rect x="80.4756%" y="133" width="0.0219%" height="15" fill="rgb(243,110,44)" fg:x="33131" fg:w="9"/><text x="80.7256%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (9 samples, 0.02%)</title><rect x="80.5412%" y="117" width="0.0219%" height="15" fill="rgb(222,74,54)" fg:x="33158" fg:w="9"/><text x="80.7912%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.03%)</title><rect x="80.6286%" y="101" width="0.0267%" height="15" fill="rgb(216,99,12)" fg:x="33194" fg:w="11"/><text x="80.8786%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (42 samples, 0.10%)</title><rect x="80.5679%" y="117" width="0.1020%" height="15" fill="rgb(226,22,26)" fg:x="33169" fg:w="42"/><text x="80.8179%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 0.05%)</title><rect x="80.6699%" y="117" width="0.0534%" height="15" fill="rgb(217,163,10)" fg:x="33211" fg:w="22"/><text x="80.9199%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.04%)</title><rect x="80.6869%" y="101" width="0.0364%" height="15" fill="rgb(213,25,53)" fg:x="33218" fg:w="15"/><text x="80.9369%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (9 samples, 0.02%)</title><rect x="80.7379%" y="117" width="0.0219%" height="15" fill="rgb(252,105,26)" fg:x="33239" fg:w="9"/><text x="80.9879%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (97 samples, 0.24%)</title><rect x="80.8205%" y="101" width="0.2356%" height="15" fill="rgb(220,39,43)" fg:x="33273" fg:w="97"/><text x="81.0705%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (131 samples, 0.32%)</title><rect x="80.7598%" y="117" width="0.3182%" height="15" fill="rgb(229,68,48)" fg:x="33248" fg:w="131"/><text x="81.0098%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (5 samples, 0.01%)</title><rect x="81.0659%" y="101" width="0.0121%" height="15" fill="rgb(252,8,32)" fg:x="33374" fg:w="5"/><text x="81.3159%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (6 samples, 0.01%)</title><rect x="81.0901%" y="101" width="0.0146%" height="15" fill="rgb(223,20,43)" fg:x="33384" fg:w="6"/><text x="81.3401%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (36 samples, 0.09%)</title><rect x="81.1752%" y="69" width="0.0874%" height="15" fill="rgb(229,81,49)" fg:x="33419" fg:w="36"/><text x="81.4252%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (5 samples, 0.01%)</title><rect x="81.2626%" y="69" width="0.0121%" height="15" fill="rgb(236,28,36)" fg:x="33455" fg:w="5"/><text x="81.5126%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (80 samples, 0.19%)</title><rect x="81.1096%" y="101" width="0.1943%" height="15" fill="rgb(249,185,26)" fg:x="33392" fg:w="80"/><text x="81.3596%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (71 samples, 0.17%)</title><rect x="81.1314%" y="85" width="0.1725%" height="15" fill="rgb(249,174,33)" fg:x="33401" fg:w="71"/><text x="81.3814%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (12 samples, 0.03%)</title><rect x="81.2747%" y="69" width="0.0291%" height="15" fill="rgb(233,201,37)" fg:x="33460" fg:w="12"/><text x="81.5247%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (96 samples, 0.23%)</title><rect x="81.0780%" y="117" width="0.2332%" height="15" fill="rgb(221,78,26)" fg:x="33379" fg:w="96"/><text x="81.3280%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.05%)</title><rect x="81.3112%" y="117" width="0.0534%" height="15" fill="rgb(250,127,30)" fg:x="33475" fg:w="22"/><text x="81.5612%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (19 samples, 0.05%)</title><rect x="81.3185%" y="101" width="0.0462%" height="15" fill="rgb(230,49,44)" fg:x="33478" fg:w="19"/><text x="81.5685%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (20 samples, 0.05%)</title><rect x="81.3695%" y="117" width="0.0486%" height="15" fill="rgb(229,67,23)" fg:x="33499" fg:w="20"/><text x="81.6195%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (384 samples, 0.93%)</title><rect x="80.5072%" y="133" width="0.9327%" height="15" fill="rgb(249,83,47)" fg:x="33144" fg:w="384"/><text x="80.7572%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.02%)</title><rect x="81.4181%" y="117" width="0.0219%" height="15" fill="rgb(215,43,3)" fg:x="33519" fg:w="9"/><text x="81.6681%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (601 samples, 1.46%)</title><rect x="80.2327%" y="149" width="1.4598%" height="15" fill="rgb(238,154,13)" fg:x="33031" fg:w="601"/><text x="80.4827%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (101 samples, 0.25%)</title><rect x="81.4472%" y="133" width="0.2453%" height="15" fill="rgb(219,56,2)" fg:x="33531" fg:w="101"/><text x="81.6972%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (6 samples, 0.01%)</title><rect x="81.6925%" y="149" width="0.0146%" height="15" fill="rgb(233,0,4)" fg:x="33632" fg:w="6"/><text x="81.9425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="81.7071%" y="149" width="0.0243%" height="15" fill="rgb(235,30,7)" fg:x="33638" fg:w="10"/><text x="81.9571%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (8 samples, 0.02%)</title><rect x="81.7314%" y="149" width="0.0194%" height="15" fill="rgb(250,79,13)" fg:x="33648" fg:w="8"/><text x="81.9814%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (685 samples, 1.66%)</title><rect x="80.1671%" y="165" width="1.6639%" height="15" fill="rgb(211,146,34)" fg:x="33004" fg:w="685"/><text x="80.4171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (29 samples, 0.07%)</title><rect x="81.7605%" y="149" width="0.0704%" height="15" fill="rgb(228,22,38)" fg:x="33660" fg:w="29"/><text x="82.0105%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (27 samples, 0.07%)</title><rect x="81.7654%" y="133" width="0.0656%" height="15" fill="rgb(235,168,5)" fg:x="33662" fg:w="27"/><text x="82.0154%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (21 samples, 0.05%)</title><rect x="81.8310%" y="165" width="0.0510%" height="15" fill="rgb(221,155,16)" fg:x="33689" fg:w="21"/><text x="82.0810%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (7 samples, 0.02%)</title><rect x="81.8650%" y="149" width="0.0170%" height="15" fill="rgb(215,215,53)" fg:x="33703" fg:w="7"/><text x="82.1150%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (7 samples, 0.02%)</title><rect x="81.8650%" y="133" width="0.0170%" height="15" fill="rgb(223,4,10)" fg:x="33703" fg:w="7"/><text x="82.1150%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.02%)</title><rect x="81.8650%" y="117" width="0.0170%" height="15" fill="rgb(234,103,6)" fg:x="33703" fg:w="7"/><text x="82.1150%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (55 samples, 0.13%)</title><rect x="81.8820%" y="149" width="0.1336%" height="15" fill="rgb(227,97,0)" fg:x="33710" fg:w="55"/><text x="82.1320%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (7 samples, 0.02%)</title><rect x="82.0180%" y="149" width="0.0170%" height="15" fill="rgb(234,150,53)" fg:x="33766" fg:w="7"/><text x="82.2680%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.02%)</title><rect x="82.0180%" y="133" width="0.0170%" height="15" fill="rgb(228,201,54)" fg:x="33766" fg:w="7"/><text x="82.2680%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (69 samples, 0.17%)</title><rect x="81.8820%" y="165" width="0.1676%" height="15" fill="rgb(222,22,37)" fg:x="33710" fg:w="69"/><text x="82.1320%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (6 samples, 0.01%)</title><rect x="82.0350%" y="149" width="0.0146%" height="15" fill="rgb(237,53,32)" fg:x="33773" fg:w="6"/><text x="82.2850%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.01%)</title><rect x="82.0350%" y="133" width="0.0146%" height="15" fill="rgb(233,25,53)" fg:x="33773" fg:w="6"/><text x="82.2850%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (5 samples, 0.01%)</title><rect x="82.1662%" y="149" width="0.0121%" height="15" fill="rgb(210,40,34)" fg:x="33827" fg:w="5"/><text x="82.4162%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (126 samples, 0.31%)</title><rect x="82.1783%" y="149" width="0.3061%" height="15" fill="rgb(241,220,44)" fg:x="33832" fg:w="126"/><text x="82.4283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (5 samples, 0.01%)</title><rect x="82.4917%" y="149" width="0.0121%" height="15" fill="rgb(235,28,35)" fg:x="33961" fg:w="5"/><text x="82.7417%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (33 samples, 0.08%)</title><rect x="82.5038%" y="149" width="0.0802%" height="15" fill="rgb(210,56,17)" fg:x="33966" fg:w="33"/><text x="82.7538%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (200 samples, 0.49%)</title><rect x="82.5840%" y="149" width="0.4858%" height="15" fill="rgb(224,130,29)" fg:x="33999" fg:w="200"/><text x="82.8340%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (197 samples, 0.48%)</title><rect x="82.5913%" y="133" width="0.4785%" height="15" fill="rgb(235,212,8)" fg:x="34002" fg:w="197"/><text x="82.8413%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (149 samples, 0.36%)</title><rect x="83.0746%" y="133" width="0.3619%" height="15" fill="rgb(223,33,50)" fg:x="34201" fg:w="149"/><text x="83.3246%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (573 samples, 1.39%)</title><rect x="82.0496%" y="165" width="1.3918%" height="15" fill="rgb(219,149,13)" fg:x="33779" fg:w="573"/><text x="82.2996%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (153 samples, 0.37%)</title><rect x="83.0698%" y="149" width="0.3716%" height="15" fill="rgb(250,156,29)" fg:x="34199" fg:w="153"/><text x="83.3198%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (46 samples, 0.11%)</title><rect x="83.4414%" y="165" width="0.1117%" height="15" fill="rgb(216,193,19)" fg:x="34352" fg:w="46"/><text x="83.6914%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (46 samples, 0.11%)</title><rect x="83.4414%" y="149" width="0.1117%" height="15" fill="rgb(216,135,14)" fg:x="34352" fg:w="46"/><text x="83.6914%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (5 samples, 0.01%)</title><rect x="83.5532%" y="165" width="0.0121%" height="15" fill="rgb(241,47,5)" fg:x="34398" fg:w="5"/><text x="83.8032%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.02%)</title><rect x="83.5653%" y="165" width="0.0243%" height="15" fill="rgb(233,42,35)" fg:x="34403" fg:w="10"/><text x="83.8153%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (42 samples, 0.10%)</title><rect x="83.6527%" y="117" width="0.1020%" height="15" fill="rgb(231,13,6)" fg:x="34439" fg:w="42"/><text x="83.9027%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (5 samples, 0.01%)</title><rect x="83.7548%" y="117" width="0.0121%" height="15" fill="rgb(207,181,40)" fg:x="34481" fg:w="5"/><text x="84.0048%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (75 samples, 0.18%)</title><rect x="83.5993%" y="165" width="0.1822%" height="15" fill="rgb(254,173,49)" fg:x="34417" fg:w="75"/><text x="83.8493%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (70 samples, 0.17%)</title><rect x="83.6115%" y="149" width="0.1700%" height="15" fill="rgb(221,1,38)" fg:x="34422" fg:w="70"/><text x="83.8615%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (63 samples, 0.15%)</title><rect x="83.6285%" y="133" width="0.1530%" height="15" fill="rgb(206,124,46)" fg:x="34429" fg:w="63"/><text x="83.8785%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.01%)</title><rect x="83.7669%" y="117" width="0.0146%" height="15" fill="rgb(249,21,11)" fg:x="34486" fg:w="6"/><text x="84.0169%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (435 samples, 1.06%)</title><rect x="83.7961%" y="165" width="1.0566%" height="15" fill="rgb(222,201,40)" fg:x="34498" fg:w="435"/><text x="84.0461%" y="175.50"></text></g><g><title>flamegraph_benchmark`flamegraph_benchmark::main (35,348 samples, 85.86%)</title><rect x="1.1343%" y="181" width="85.8607%" height="15" fill="rgb(235,61,29)" fg:x="467" fg:w="35348"/><text x="1.3843%" y="191.50">flamegraph_benchmark`flamegraph_benchmark::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (882 samples, 2.14%)</title><rect x="84.8527%" y="165" width="2.1424%" height="15" fill="rgb(219,207,3)" fg:x="34933" fg:w="882"/><text x="85.1027%" y="175.50">l..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::get_block (47 samples, 0.11%)</title><rect x="86.9951%" y="181" width="0.1142%" height="15" fill="rgb(222,56,46)" fg:x="35815" fg:w="47"/><text x="87.2451%" y="191.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block (174 samples, 0.42%)</title><rect x="87.1092%" y="181" width="0.4226%" height="15" fill="rgb(239,76,54)" fg:x="35862" fg:w="174"/><text x="87.3592%" y="191.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (308 samples, 0.75%)</title><rect x="87.5319%" y="181" width="0.7481%" height="15" fill="rgb(231,124,27)" fg:x="36036" fg:w="308"/><text x="87.7819%" y="191.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::set_block (116 samples, 0.28%)</title><rect x="88.2800%" y="181" width="0.2818%" height="15" fill="rgb(249,195,6)" fg:x="36344" fg:w="116"/><text x="88.5300%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (9 samples, 0.02%)</title><rect x="88.5618%" y="181" width="0.0219%" height="15" fill="rgb(237,174,47)" fg:x="36460" fg:w="9"/><text x="88.8118%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="88.5836%" y="181" width="0.0146%" height="15" fill="rgb(206,201,31)" fg:x="36469" fg:w="6"/><text x="88.8336%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.02%)</title><rect x="88.5982%" y="181" width="0.0194%" height="15" fill="rgb(231,57,52)" fg:x="36475" fg:w="8"/><text x="88.8482%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (11 samples, 0.03%)</title><rect x="88.6176%" y="181" width="0.0267%" height="15" fill="rgb(248,177,22)" fg:x="36483" fg:w="11"/><text x="88.8676%" y="191.50"></text></g><g><title>dyld`start (36,841 samples, 89.49%)</title><rect x="0.0000%" y="229" width="89.4872%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="36841"/><text x="0.2500%" y="239.50">dyld`start</text></g><g><title>flamegraph_benchmark`main (36,841 samples, 89.49%)</title><rect x="0.0000%" y="213" width="89.4872%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="36841"/><text x="0.2500%" y="223.50">flamegraph_benchmark`main</text></g><g><title>flamegraph_benchmark`std::sys::backtrace::__rust_begin_short_backtrace (36,841 samples, 89.49%)</title><rect x="0.0000%" y="197" width="89.4872%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="36841"/><text x="0.2500%" y="207.50">flamegraph_benchmark`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (339 samples, 0.82%)</title><rect x="88.6638%" y="181" width="0.8234%" height="15" fill="rgb(228,167,24)" fg:x="36502" fg:w="339"/><text x="88.9138%" y="191.50"></text></g><g><title>flamegraph_benchmark`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::cmp::PartialEq&gt;::eq (56 samples, 0.14%)</title><rect x="91.6199%" y="213" width="0.1360%" height="15" fill="rgb(228,143,12)" fg:x="37719" fg:w="56"/><text x="91.8699%" y="223.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (92 samples, 0.22%)</title><rect x="91.7559%" y="213" width="0.2235%" height="15" fill="rgb(249,149,8)" fg:x="37775" fg:w="92"/><text x="92.0059%" y="223.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$memcmp (69 samples, 0.17%)</title><rect x="91.9794%" y="213" width="0.1676%" height="15" fill="rgb(243,35,44)" fg:x="37867" fg:w="69"/><text x="92.2294%" y="223.50"></text></g><g><title>flamegraph_benchmark`core::hash::BuildHasher::hash_one (37 samples, 0.09%)</title><rect x="92.1470%" y="213" width="0.0899%" height="15" fill="rgb(246,89,9)" fg:x="37936" fg:w="37"/><text x="92.3970%" y="223.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (92 samples, 0.22%)</title><rect x="92.2369%" y="213" width="0.2235%" height="15" fill="rgb(233,213,13)" fg:x="37973" fg:w="92"/><text x="92.4869%" y="223.50"></text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTableInner::drop_inner_table (48 samples, 0.12%)</title><rect x="92.4603%" y="213" width="0.1166%" height="15" fill="rgb(233,141,41)" fg:x="38065" fg:w="48"/><text x="92.7103%" y="223.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (67 samples, 0.16%)</title><rect x="93.6700%" y="197" width="0.1627%" height="15" fill="rgb(239,167,4)" fg:x="38563" fg:w="67"/><text x="93.9200%" y="207.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (118 samples, 0.29%)</title><rect x="93.8327%" y="197" width="0.2866%" height="15" fill="rgb(209,217,16)" fg:x="38630" fg:w="118"/><text x="94.0827%" y="207.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 0.10%)</title><rect x="94.0173%" y="181" width="0.1020%" height="15" fill="rgb(219,88,35)" fg:x="38706" fg:w="42"/><text x="94.2673%" y="191.50"></text></g><g><title>flamegraph_benchmark`core::hash::Hasher::write_str (292 samples, 0.71%)</title><rect x="94.1194%" y="197" width="0.7093%" height="15" fill="rgb(220,193,23)" fg:x="38748" fg:w="292"/><text x="94.3694%" y="207.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block (944 samples, 2.29%)</title><rect x="92.5769%" y="213" width="2.2930%" height="15" fill="rgb(230,90,52)" fg:x="38113" fg:w="944"/><text x="92.8269%" y="223.50">f..</text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTableInner::drop_inner_table (17 samples, 0.04%)</title><rect x="94.8286%" y="197" width="0.0413%" height="15" fill="rgb(252,106,19)" fg:x="39040" fg:w="17"/><text x="95.0786%" y="207.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (594 samples, 1.44%)</title><rect x="94.8699%" y="213" width="1.4428%" height="15" fill="rgb(206,74,20)" fg:x="39057" fg:w="594"/><text x="95.1199%" y="223.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (39 samples, 0.09%)</title><rect x="96.2180%" y="197" width="0.0947%" height="15" fill="rgb(230,138,44)" fg:x="39612" fg:w="39"/><text x="96.4680%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.05%)</title><rect x="96.2618%" y="181" width="0.0510%" height="15" fill="rgb(235,182,43)" fg:x="39630" fg:w="21"/><text x="96.5118%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.05%)</title><rect x="96.2618%" y="165" width="0.0510%" height="15" fill="rgb(242,16,51)" fg:x="39630" fg:w="21"/><text x="96.5118%" y="175.50"></text></g><g><title>flamegraph_benchmark`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (330 samples, 0.80%)</title><rect x="96.6990%" y="197" width="0.8016%" height="15" fill="rgb(248,9,4)" fg:x="39810" fg:w="330"/><text x="96.9490%" y="207.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::set_block (839 samples, 2.04%)</title><rect x="96.3128%" y="213" width="2.0379%" height="15" fill="rgb(210,31,22)" fg:x="39651" fg:w="839"/><text x="96.5628%" y="223.50">f..</text></g><g><title>flamegraph_benchmark`core::hash::BuildHasher::hash_one (350 samples, 0.85%)</title><rect x="97.5005%" y="197" width="0.8502%" height="15" fill="rgb(239,54,39)" fg:x="40140" fg:w="350"/><text x="97.7505%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (16 samples, 0.04%)</title><rect x="98.4309%" y="149" width="0.0389%" height="15" fill="rgb(230,99,41)" fg:x="40523" fg:w="16"/><text x="98.6809%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (20 samples, 0.05%)</title><rect x="98.4236%" y="165" width="0.0486%" height="15" fill="rgb(253,106,12)" fg:x="40520" fg:w="20"/><text x="98.6736%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.02%)</title><rect x="98.4819%" y="117" width="0.0219%" height="15" fill="rgb(213,46,41)" fg:x="40544" fg:w="9"/><text x="98.7319%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.04%)</title><rect x="98.4722%" y="165" width="0.0413%" height="15" fill="rgb(215,133,35)" fg:x="40540" fg:w="17"/><text x="98.7222%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (17 samples, 0.04%)</title><rect x="98.4722%" y="149" width="0.0413%" height="15" fill="rgb(213,28,5)" fg:x="40540" fg:w="17"/><text x="98.7222%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (16 samples, 0.04%)</title><rect x="98.4746%" y="133" width="0.0389%" height="15" fill="rgb(215,77,49)" fg:x="40541" fg:w="16"/><text x="98.7246%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (51 samples, 0.12%)</title><rect x="98.3920%" y="181" width="0.1239%" height="15" fill="rgb(248,100,22)" fg:x="40507" fg:w="51"/><text x="98.6420%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (82 samples, 0.20%)</title><rect x="98.3531%" y="197" width="0.1992%" height="15" fill="rgb(208,67,9)" fg:x="40491" fg:w="82"/><text x="98.6031%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.03%)</title><rect x="98.5183%" y="181" width="0.0340%" height="15" fill="rgb(219,133,21)" fg:x="40559" fg:w="14"/><text x="98.7683%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (90 samples, 0.22%)</title><rect x="98.3507%" y="213" width="0.2186%" height="15" fill="rgb(246,46,29)" fg:x="40490" fg:w="90"/><text x="98.6007%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.01%)</title><rect x="98.5572%" y="197" width="0.0121%" height="15" fill="rgb(246,185,52)" fg:x="40575" fg:w="5"/><text x="98.8072%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.02%)</title><rect x="98.5887%" y="197" width="0.0219%" height="15" fill="rgb(252,136,11)" fg:x="40588" fg:w="9"/><text x="98.8387%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.02%)</title><rect x="98.6155%" y="181" width="0.0219%" height="15" fill="rgb(219,138,53)" fg:x="40599" fg:w="9"/><text x="98.8655%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (27 samples, 0.07%)</title><rect x="98.5766%" y="213" width="0.0656%" height="15" fill="rgb(211,51,23)" fg:x="40583" fg:w="27"/><text x="98.8266%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (11 samples, 0.03%)</title><rect x="98.6155%" y="197" width="0.0267%" height="15" fill="rgb(247,221,28)" fg:x="40599" fg:w="11"/><text x="98.8655%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.02%)</title><rect x="98.6470%" y="213" width="0.0170%" height="15" fill="rgb(251,222,45)" fg:x="40612" fg:w="7"/><text x="98.8970%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.02%)</title><rect x="98.6470%" y="197" width="0.0170%" height="15" fill="rgb(217,162,53)" fg:x="40612" fg:w="7"/><text x="98.8970%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (6 samples, 0.01%)</title><rect x="98.6495%" y="181" width="0.0146%" height="15" fill="rgb(229,93,14)" fg:x="40613" fg:w="6"/><text x="98.8995%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.01%)</title><rect x="98.6495%" y="165" width="0.0146%" height="15" fill="rgb(209,67,49)" fg:x="40613" fg:w="6"/><text x="98.8995%" y="175.50"></text></g><g><title>flamegraph_benchmark`flamegraph_benchmark::main (4,005 samples, 9.73%)</title><rect x="89.4897%" y="229" width="9.7282%" height="15" fill="rgb(213,87,29)" fg:x="36842" fg:w="4005"/><text x="89.7397%" y="239.50">flamegraph_ben..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (226 samples, 0.55%)</title><rect x="98.6689%" y="213" width="0.5490%" height="15" fill="rgb(205,151,52)" fg:x="40621" fg:w="226"/><text x="98.9189%" y="223.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block (97 samples, 0.24%)</title><rect x="99.2179%" y="229" width="0.2356%" height="15" fill="rgb(253,215,39)" fg:x="40847" fg:w="97"/><text x="99.4679%" y="239.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (79 samples, 0.19%)</title><rect x="99.4535%" y="229" width="0.1919%" height="15" fill="rgb(221,220,41)" fg:x="40944" fg:w="79"/><text x="99.7035%" y="239.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::set_block (135 samples, 0.33%)</title><rect x="99.6454%" y="229" width="0.3279%" height="15" fill="rgb(218,133,21)" fg:x="41023" fg:w="135"/><text x="99.8954%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.01%)</title><rect x="99.9733%" y="229" width="0.0121%" height="15" fill="rgb(221,193,43)" fg:x="41158" fg:w="5"/><text x="100.2233%" y="239.50"></text></g><g><title>all (41,169 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="41169"/><text x="0.2500%" y="255.50"></text></g></svg></svg>