<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="42283"><g><title>flamegraph_benchmark`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::cmp::PartialEq&gt;::eq (78 samples, 0.18%)</title><rect x="0.0000%" y="181" width="0.1845%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="78"/><text x="0.2500%" y="191.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (322 samples, 0.76%)</title><rect x="0.1845%" y="181" width="0.7615%" height="15" fill="rgb(217,0,24)" fg:x="78" fg:w="322"/><text x="0.4345%" y="191.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$memcmp (38 samples, 0.09%)</title><rect x="0.9555%" y="181" width="0.0899%" height="15" fill="rgb(221,193,54)" fg:x="404" fg:w="38"/><text x="1.2055%" y="191.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (295 samples, 0.70%)</title><rect x="29.1157%" y="165" width="0.6977%" height="15" fill="rgb(248,212,6)" fg:x="12311" fg:w="295"/><text x="29.3657%" y="175.50"></text></g><g><title>flamegraph_benchmark`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::cmp::PartialEq&gt;::eq (178 samples, 0.42%)</title><rect x="29.8134%" y="165" width="0.4210%" height="15" fill="rgb(208,68,35)" fg:x="12606" fg:w="178"/><text x="30.0634%" y="175.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (357 samples, 0.84%)</title><rect x="30.2344%" y="165" width="0.8443%" height="15" fill="rgb(232,128,0)" fg:x="12784" fg:w="357"/><text x="30.4844%" y="175.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (83 samples, 0.20%)</title><rect x="30.8824%" y="149" width="0.1963%" height="15" fill="rgb(207,160,47)" fg:x="13058" fg:w="83"/><text x="31.1324%" y="159.50"></text></g><g><title>flamegraph_benchmark`&lt;rand_hc::hc128::Hc128Core as rand_core::block::BlockRngCore&gt;::generate (16 samples, 0.04%)</title><rect x="31.0787%" y="165" width="0.0378%" height="15" fill="rgb(228,23,34)" fg:x="13141" fg:w="16"/><text x="31.3287%" y="175.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$memcmp (177 samples, 0.42%)</title><rect x="31.1165%" y="165" width="0.4186%" height="15" fill="rgb(218,30,26)" fg:x="13157" fg:w="177"/><text x="31.3665%" y="175.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$memcpy (34 samples, 0.08%)</title><rect x="31.5351%" y="165" width="0.0804%" height="15" fill="rgb(220,122,19)" fg:x="13334" fg:w="34"/><text x="31.7851%" y="175.50"></text></g><g><title>flamegraph_benchmark`core::hash::BuildHasher::hash_one (56 samples, 0.13%)</title><rect x="31.6226%" y="165" width="0.1324%" height="15" fill="rgb(250,228,42)" fg:x="13371" fg:w="56"/><text x="31.8726%" y="175.50"></text></g><g><title>flamegraph_benchmark`core::hash::Hasher::write_str (330 samples, 0.78%)</title><rect x="31.7551%" y="165" width="0.7805%" height="15" fill="rgb(240,193,28)" fg:x="13427" fg:w="330"/><text x="32.0051%" y="175.50"></text></g><g><title>flamegraph_benchmark`core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (1,713 samples, 4.05%)</title><rect x="32.5355%" y="165" width="4.0513%" height="15" fill="rgb(216,20,37)" fg:x="13757" fg:w="1713"/><text x="32.7855%" y="175.50">flam..</text></g><g><title>flamegraph_benchmark`core::ptr::drop_in_place&lt;minecraft_schematic_utils::region::Region&gt; (9 samples, 0.02%)</title><rect x="36.5868%" y="165" width="0.0213%" height="15" fill="rgb(206,188,39)" fg:x="15470" fg:w="9"/><text x="36.8368%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.02%)</title><rect x="36.5892%" y="149" width="0.0189%" height="15" fill="rgb(217,207,13)" fg:x="15471" fg:w="8"/><text x="36.8392%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (77 samples, 0.18%)</title><rect x="36.6176%" y="133" width="0.1821%" height="15" fill="rgb(231,73,38)" fg:x="15483" fg:w="77"/><text x="36.8676%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.02%)</title><rect x="36.7997%" y="133" width="0.0166%" height="15" fill="rgb(225,20,46)" fg:x="15560" fg:w="7"/><text x="37.0497%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (17 samples, 0.04%)</title><rect x="36.8162%" y="133" width="0.0402%" height="15" fill="rgb(210,31,41)" fg:x="15567" fg:w="17"/><text x="37.0662%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.04%)</title><rect x="36.8162%" y="117" width="0.0402%" height="15" fill="rgb(221,200,47)" fg:x="15567" fg:w="17"/><text x="37.0662%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (148 samples, 0.35%)</title><rect x="36.6128%" y="149" width="0.3500%" height="15" fill="rgb(226,26,5)" fg:x="15481" fg:w="148"/><text x="36.8628%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (45 samples, 0.11%)</title><rect x="36.8564%" y="133" width="0.1064%" height="15" fill="rgb(249,33,26)" fg:x="15584" fg:w="45"/><text x="37.1064%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (45 samples, 0.11%)</title><rect x="36.8564%" y="117" width="0.1064%" height="15" fill="rgb(235,183,28)" fg:x="15584" fg:w="45"/><text x="37.1064%" y="127.50"></text></g><g><title>flamegraph_benchmark`core::ptr::drop_in_place&lt;minecraft_schematic_utils::universal_schematic::UniversalSchematic&gt; (154 samples, 0.36%)</title><rect x="36.6081%" y="165" width="0.3642%" height="15" fill="rgb(221,5,38)" fg:x="15479" fg:w="154"/><text x="36.8581%" y="175.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (12 samples, 0.03%)</title><rect x="37.0385%" y="85" width="0.0284%" height="15" fill="rgb(247,18,42)" fg:x="15661" fg:w="12"/><text x="37.2885%" y="95.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.02%)</title><rect x="37.0480%" y="69" width="0.0189%" height="15" fill="rgb(241,131,45)" fg:x="15665" fg:w="8"/><text x="37.2980%" y="79.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (28 samples, 0.07%)</title><rect x="37.0031%" y="133" width="0.0662%" height="15" fill="rgb(249,31,29)" fg:x="15646" fg:w="28"/><text x="37.2531%" y="143.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (23 samples, 0.05%)</title><rect x="37.0149%" y="117" width="0.0544%" height="15" fill="rgb(225,111,53)" fg:x="15651" fg:w="23"/><text x="37.2649%" y="127.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::quicksort::quicksort (16 samples, 0.04%)</title><rect x="37.0314%" y="101" width="0.0378%" height="15" fill="rgb(238,160,17)" fg:x="15658" fg:w="16"/><text x="37.2814%" y="111.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::driftsort_main (42 samples, 0.10%)</title><rect x="36.9723%" y="165" width="0.0993%" height="15" fill="rgb(214,148,48)" fg:x="15633" fg:w="42"/><text x="37.2223%" y="175.50"></text></g><g><title>flamegraph_benchmark`core::slice::sort::stable::drift::sort (42 samples, 0.10%)</title><rect x="36.9723%" y="149" width="0.0993%" height="15" fill="rgb(232,36,49)" fg:x="15633" fg:w="42"/><text x="37.2223%" y="159.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (248 samples, 0.59%)</title><rect x="37.0716%" y="165" width="0.5865%" height="15" fill="rgb(209,103,24)" fg:x="15675" fg:w="248"/><text x="37.3216%" y="175.50"></text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTableInner::drop_inner_table (160 samples, 0.38%)</title><rect x="37.6582%" y="165" width="0.3784%" height="15" fill="rgb(229,88,8)" fg:x="15923" fg:w="160"/><text x="37.9082%" y="175.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::stream::inflate_loop (20 samples, 0.05%)</title><rect x="38.2731%" y="117" width="0.0473%" height="15" fill="rgb(213,181,19)" fg:x="16183" fg:w="20"/><text x="38.5231%" y="127.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::decompress (20 samples, 0.05%)</title><rect x="38.2731%" y="101" width="0.0473%" height="15" fill="rgb(254,191,54)" fg:x="16183" fg:w="20"/><text x="38.5231%" y="111.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::transfer (20 samples, 0.05%)</title><rect x="38.2731%" y="85" width="0.0473%" height="15" fill="rgb(241,83,37)" fg:x="16183" fg:w="20"/><text x="38.5231%" y="95.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (21 samples, 0.05%)</title><rect x="38.2731%" y="149" width="0.0497%" height="15" fill="rgb(233,36,39)" fg:x="16183" fg:w="21"/><text x="38.5231%" y="159.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (21 samples, 0.05%)</title><rect x="38.2731%" y="133" width="0.0497%" height="15" fill="rgb(226,3,54)" fg:x="16183" fg:w="21"/><text x="38.5231%" y="143.50"></text></g><g><title>flamegraph_benchmark`flate2::crc::Crc::update (14 samples, 0.03%)</title><rect x="38.3251%" y="149" width="0.0331%" height="15" fill="rgb(245,192,40)" fg:x="16205" fg:w="14"/><text x="38.5751%" y="159.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (86 samples, 0.20%)</title><rect x="38.3582%" y="149" width="0.2034%" height="15" fill="rgb(238,167,29)" fg:x="16219" fg:w="86"/><text x="38.6082%" y="159.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (519 samples, 1.23%)</title><rect x="38.5640%" y="149" width="1.2274%" height="15" fill="rgb(232,182,51)" fg:x="16306" fg:w="519"/><text x="38.8140%" y="159.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (53 samples, 0.13%)</title><rect x="39.6661%" y="133" width="0.1253%" height="15" fill="rgb(231,60,39)" fg:x="16772" fg:w="53"/><text x="39.9161%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.04%)</title><rect x="39.7488%" y="117" width="0.0426%" height="15" fill="rgb(208,69,12)" fg:x="16807" fg:w="18"/><text x="39.9988%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.04%)</title><rect x="39.7559%" y="101" width="0.0355%" height="15" fill="rgb(235,93,37)" fg:x="16810" fg:w="15"/><text x="40.0059%" y="111.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::unpack_block_states (217 samples, 0.51%)</title><rect x="39.7914%" y="149" width="0.5132%" height="15" fill="rgb(213,116,39)" fg:x="16825" fg:w="217"/><text x="40.0414%" y="159.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (6 samples, 0.01%)</title><rect x="40.3046%" y="149" width="0.0142%" height="15" fill="rgb(222,207,29)" fg:x="17042" fg:w="6"/><text x="40.5546%" y="159.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (6 samples, 0.01%)</title><rect x="40.3046%" y="133" width="0.0142%" height="15" fill="rgb(206,96,30)" fg:x="17042" fg:w="6"/><text x="40.5546%" y="143.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::litematic::from_litematic (975 samples, 2.31%)</title><rect x="38.0366%" y="165" width="2.3059%" height="15" fill="rgb(218,138,4)" fg:x="16083" fg:w="975"/><text x="38.2866%" y="175.50">f..</text></g><g><title>libsystem_malloc.dylib`_szone_free (10 samples, 0.02%)</title><rect x="40.3188%" y="149" width="0.0237%" height="15" fill="rgb(250,191,14)" fg:x="17048" fg:w="10"/><text x="40.5688%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (10 samples, 0.02%)</title><rect x="40.3188%" y="133" width="0.0237%" height="15" fill="rgb(239,60,40)" fg:x="17048" fg:w="10"/><text x="40.5688%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (10 samples, 0.02%)</title><rect x="40.3188%" y="117" width="0.0237%" height="15" fill="rgb(206,27,48)" fg:x="17048" fg:w="10"/><text x="40.5688%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (10 samples, 0.02%)</title><rect x="40.3188%" y="101" width="0.0237%" height="15" fill="rgb(225,35,8)" fg:x="17048" fg:w="10"/><text x="40.5688%" y="111.50"></text></g><g><title>flamegraph_benchmark`flate2::crc::Crc::update (32 samples, 0.08%)</title><rect x="42.4426%" y="85" width="0.0757%" height="15" fill="rgb(250,213,24)" fg:x="17946" fg:w="32"/><text x="42.6926%" y="95.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::compress_inner (144 samples, 0.34%)</title><rect x="42.6034%" y="53" width="0.3406%" height="15" fill="rgb(247,123,22)" fg:x="18014" fg:w="144"/><text x="42.8534%" y="63.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::flush_output_buffer (6 samples, 0.01%)</title><rect x="42.9298%" y="37" width="0.0142%" height="15" fill="rgb(231,138,38)" fg:x="18152" fg:w="6"/><text x="43.1798%" y="47.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (178 samples, 0.42%)</title><rect x="42.5372%" y="69" width="0.4210%" height="15" fill="rgb(231,145,46)" fg:x="17986" fg:w="178"/><text x="42.7872%" y="79.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::flush_output_buffer (6 samples, 0.01%)</title><rect x="42.9440%" y="53" width="0.0142%" height="15" fill="rgb(251,118,11)" fg:x="18158" fg:w="6"/><text x="43.1940%" y="63.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::compress_inner (6 samples, 0.01%)</title><rect x="42.9629%" y="69" width="0.0142%" height="15" fill="rgb(217,147,25)" fg:x="18166" fg:w="6"/><text x="43.2129%" y="79.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_tag_body (3,082 samples, 7.29%)</title><rect x="42.4071%" y="101" width="7.2890%" height="15" fill="rgb(247,81,37)" fg:x="17931" fg:w="3082"/><text x="42.6571%" y="111.50">flamegraph..</text></g><g><title>flamegraph_benchmark`std::io::Write::write_all (3,035 samples, 7.18%)</title><rect x="42.5183%" y="85" width="7.1778%" height="15" fill="rgb(209,12,38)" fg:x="17978" fg:w="3035"/><text x="42.7683%" y="95.50">flamegraph..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2,838 samples, 6.71%)</title><rect x="42.9842%" y="69" width="6.7119%" height="15" fill="rgb(227,1,9)" fg:x="18175" fg:w="2838"/><text x="43.2342%" y="79.50">libsystem..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::litematic::to_litematic (3,962 samples, 9.37%)</title><rect x="40.3425%" y="165" width="9.3702%" height="15" fill="rgb(248,47,43)" fg:x="17058" fg:w="3962"/><text x="40.5925%" y="175.50">flamegraph_be..</text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_nbt (3,089 samples, 7.31%)</title><rect x="42.4071%" y="149" width="7.3055%" height="15" fill="rgb(221,10,30)" fg:x="17931" fg:w="3089"/><text x="42.6571%" y="159.50">flamegraph..</text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_tag_body (3,089 samples, 7.31%)</title><rect x="42.4071%" y="133" width="7.3055%" height="15" fill="rgb(210,229,1)" fg:x="17931" fg:w="3089"/><text x="42.6571%" y="143.50">flamegraph..</text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_tag_body (3,089 samples, 7.31%)</title><rect x="42.4071%" y="117" width="7.3055%" height="15" fill="rgb(222,148,37)" fg:x="17931" fg:w="3089"/><text x="42.6571%" y="127.50">flamegraph..</text></g><g><title>flamegraph_benchmark`std::io::Write::write_all (7 samples, 0.02%)</title><rect x="49.6961%" y="101" width="0.0166%" height="15" fill="rgb(234,67,33)" fg:x="21013" fg:w="7"/><text x="49.9461%" y="111.50"></text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTableInner::drop_inner_table (5 samples, 0.01%)</title><rect x="49.7127%" y="149" width="0.0118%" height="15" fill="rgb(247,98,35)" fg:x="21020" fg:w="5"/><text x="49.9627%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.01%)</title><rect x="49.7127%" y="133" width="0.0118%" height="15" fill="rgb(247,138,52)" fg:x="21020" fg:w="5"/><text x="49.9627%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.01%)</title><rect x="49.7127%" y="117" width="0.0118%" height="15" fill="rgb(213,79,30)" fg:x="21020" fg:w="5"/><text x="49.9627%" y="127.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::stream::inflate_loop (7 samples, 0.02%)</title><rect x="49.7292%" y="85" width="0.0166%" height="15" fill="rgb(246,177,23)" fg:x="21027" fg:w="7"/><text x="49.9792%" y="95.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::decompress (7 samples, 0.02%)</title><rect x="49.7292%" y="69" width="0.0166%" height="15" fill="rgb(230,62,27)" fg:x="21027" fg:w="7"/><text x="49.9792%" y="79.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::transfer (7 samples, 0.02%)</title><rect x="49.7292%" y="53" width="0.0166%" height="15" fill="rgb(216,154,8)" fg:x="21027" fg:w="7"/><text x="49.9792%" y="63.50"></text></g><g><title>flamegraph_benchmark`std::io::default_read_exact (8 samples, 0.02%)</title><rect x="49.7292%" y="117" width="0.0189%" height="15" fill="rgb(244,35,45)" fg:x="21027" fg:w="8"/><text x="49.9792%" y="127.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (8 samples, 0.02%)</title><rect x="49.7292%" y="101" width="0.0189%" height="15" fill="rgb(251,115,12)" fg:x="21027" fg:w="8"/><text x="49.9792%" y="111.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (21 samples, 0.05%)</title><rect x="49.7245%" y="149" width="0.0497%" height="15" fill="rgb(240,54,50)" fg:x="21025" fg:w="21"/><text x="49.9745%" y="159.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (21 samples, 0.05%)</title><rect x="49.7245%" y="133" width="0.0497%" height="15" fill="rgb(233,84,52)" fg:x="21025" fg:w="21"/><text x="49.9745%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.03%)</title><rect x="49.7481%" y="117" width="0.0260%" height="15" fill="rgb(207,117,47)" fg:x="21035" fg:w="11"/><text x="49.9981%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (11 samples, 0.03%)</title><rect x="49.7481%" y="101" width="0.0260%" height="15" fill="rgb(249,43,39)" fg:x="21035" fg:w="11"/><text x="49.9981%" y="111.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::schematic::from_schematic (35 samples, 0.08%)</title><rect x="49.7127%" y="165" width="0.0828%" height="15" fill="rgb(209,38,44)" fg:x="21020" fg:w="35"/><text x="49.9627%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (9 samples, 0.02%)</title><rect x="49.7741%" y="149" width="0.0213%" height="15" fill="rgb(236,212,23)" fg:x="21046" fg:w="9"/><text x="50.0241%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (9 samples, 0.02%)</title><rect x="49.7741%" y="133" width="0.0213%" height="15" fill="rgb(242,79,21)" fg:x="21046" fg:w="9"/><text x="50.0241%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (9 samples, 0.02%)</title><rect x="49.7741%" y="117" width="0.0213%" height="15" fill="rgb(211,96,35)" fg:x="21046" fg:w="9"/><text x="50.0241%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (9 samples, 0.02%)</title><rect x="49.7741%" y="101" width="0.0213%" height="15" fill="rgb(253,215,40)" fg:x="21046" fg:w="9"/><text x="50.0241%" y="111.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::get_merged_region (15 samples, 0.04%)</title><rect x="50.3417%" y="149" width="0.0355%" height="15" fill="rgb(211,81,21)" fg:x="21286" fg:w="15"/><text x="50.5917%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.03%)</title><rect x="50.3441%" y="133" width="0.0331%" height="15" fill="rgb(208,190,38)" fg:x="21287" fg:w="14"/><text x="50.5941%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.03%)</title><rect x="50.3441%" y="117" width="0.0331%" height="15" fill="rgb(235,213,38)" fg:x="21287" fg:w="14"/><text x="50.5941%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (13 samples, 0.03%)</title><rect x="50.3465%" y="101" width="0.0307%" height="15" fill="rgb(237,122,38)" fg:x="21288" fg:w="13"/><text x="50.5965%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (13 samples, 0.03%)</title><rect x="50.3465%" y="85" width="0.0307%" height="15" fill="rgb(244,218,35)" fg:x="21288" fg:w="13"/><text x="50.5965%" y="95.50"></text></g><g><title>flamegraph_benchmark`flate2::crc::Crc::update (25 samples, 0.06%)</title><rect x="50.3772%" y="117" width="0.0591%" height="15" fill="rgb(240,68,47)" fg:x="21301" fg:w="25"/><text x="50.6272%" y="127.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_nbt (326 samples, 0.77%)</title><rect x="50.3772%" y="149" width="0.7710%" height="15" fill="rgb(210,16,53)" fg:x="21301" fg:w="326"/><text x="50.6272%" y="159.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::write_tag_body (326 samples, 0.77%)</title><rect x="50.3772%" y="133" width="0.7710%" height="15" fill="rgb(235,124,12)" fg:x="21301" fg:w="326"/><text x="50.6272%" y="143.50"></text></g><g><title>flamegraph_benchmark`std::io::Write::write_all (301 samples, 0.71%)</title><rect x="50.4363%" y="117" width="0.7119%" height="15" fill="rgb(224,169,11)" fg:x="21326" fg:w="301"/><text x="50.6863%" y="127.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (301 samples, 0.71%)</title><rect x="50.4363%" y="101" width="0.7119%" height="15" fill="rgb(250,166,2)" fg:x="21326" fg:w="301"/><text x="50.6863%" y="111.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::deflate::core::compress_inner (301 samples, 0.71%)</title><rect x="50.4363%" y="85" width="0.7119%" height="15" fill="rgb(242,216,29)" fg:x="21326" fg:w="301"/><text x="50.6863%" y="95.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::schematic::to_schematic (629 samples, 1.49%)</title><rect x="49.7954%" y="165" width="1.4876%" height="15" fill="rgb(230,116,27)" fg:x="21055" fg:w="629"/><text x="50.0454%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (55 samples, 0.13%)</title><rect x="51.1529%" y="149" width="0.1301%" height="15" fill="rgb(228,99,48)" fg:x="21629" fg:w="55"/><text x="51.4029%" y="159.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::get_block_index (763 samples, 1.80%)</title><rect x="51.2830%" y="165" width="1.8045%" height="15" fill="rgb(253,11,6)" fg:x="21684" fg:w="763"/><text x="51.5330%" y="175.50">f..</text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (244 samples, 0.58%)</title><rect x="56.0201%" y="149" width="0.5771%" height="15" fill="rgb(247,143,39)" fg:x="23687" fg:w="244"/><text x="56.2701%" y="159.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (381 samples, 0.90%)</title><rect x="56.5972%" y="149" width="0.9011%" height="15" fill="rgb(236,97,10)" fg:x="23931" fg:w="381"/><text x="56.8472%" y="159.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (151 samples, 0.36%)</title><rect x="57.1412%" y="133" width="0.3571%" height="15" fill="rgb(233,208,19)" fg:x="24161" fg:w="151"/><text x="57.3912%" y="143.50"></text></g><g><title>flamegraph_benchmark`core::hash::Hasher::write_str (1,062 samples, 2.51%)</title><rect x="57.4983%" y="149" width="2.5116%" height="15" fill="rgb(216,164,2)" fg:x="24312" fg:w="1062"/><text x="57.7483%" y="159.50">fl..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block (3,007 samples, 7.11%)</title><rect x="53.0875%" y="165" width="7.1116%" height="15" fill="rgb(220,129,5)" fg:x="22447" fg:w="3007"/><text x="53.3375%" y="175.50">flamegraph..</text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTableInner::drop_inner_table (80 samples, 0.19%)</title><rect x="60.0099%" y="149" width="0.1892%" height="15" fill="rgb(242,17,10)" fg:x="25374" fg:w="80"/><text x="60.2599%" y="159.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (114 samples, 0.27%)</title><rect x="64.8984%" y="149" width="0.2696%" height="15" fill="rgb(242,107,0)" fg:x="27441" fg:w="114"/><text x="65.1484%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (51 samples, 0.12%)</title><rect x="65.0474%" y="133" width="0.1206%" height="15" fill="rgb(251,28,31)" fg:x="27504" fg:w="51"/><text x="65.2974%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (48 samples, 0.11%)</title><rect x="65.0545%" y="117" width="0.1135%" height="15" fill="rgb(233,223,10)" fg:x="27507" fg:w="48"/><text x="65.3045%" y="127.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (2,103 samples, 4.97%)</title><rect x="60.1991%" y="165" width="4.9736%" height="15" fill="rgb(215,21,27)" fg:x="25454" fg:w="2103"/><text x="60.4491%" y="175.50">flameg..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::get_merged_region (10 samples, 0.02%)</title><rect x="65.1728%" y="165" width="0.0237%" height="15" fill="rgb(232,23,21)" fg:x="27557" fg:w="10"/><text x="65.4228%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="65.1728%" y="149" width="0.0237%" height="15" fill="rgb(244,5,23)" fg:x="27557" fg:w="10"/><text x="65.4228%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="65.1728%" y="133" width="0.0237%" height="15" fill="rgb(226,81,46)" fg:x="27557" fg:w="10"/><text x="65.4228%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.02%)</title><rect x="65.1728%" y="117" width="0.0237%" height="15" fill="rgb(247,70,30)" fg:x="27557" fg:w="10"/><text x="65.4228%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.02%)</title><rect x="65.1728%" y="101" width="0.0237%" height="15" fill="rgb(212,68,19)" fg:x="27557" fg:w="10"/><text x="65.4228%" y="111.50"></text></g><g><title>flamegraph_benchmark`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (938 samples, 2.22%)</title><rect x="66.3553%" y="149" width="2.2184%" height="15" fill="rgb(240,187,13)" fg:x="28057" fg:w="938"/><text x="66.6053%" y="159.50">f..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::set_block (2,431 samples, 5.75%)</title><rect x="65.1964%" y="165" width="5.7494%" height="15" fill="rgb(223,113,26)" fg:x="27567" fg:w="2431"/><text x="65.4464%" y="175.50">flamegr..</text></g><g><title>flamegraph_benchmark`core::hash::BuildHasher::hash_one (1,003 samples, 2.37%)</title><rect x="68.5737%" y="149" width="2.3721%" height="15" fill="rgb(206,192,2)" fg:x="28995" fg:w="1003"/><text x="68.8237%" y="159.50">fl..</text></g><g><title>libsystem_kernel.dylib`vm_copy (8 samples, 0.02%)</title><rect x="82.2955%" y="69" width="0.0189%" height="15" fill="rgb(241,108,4)" fg:x="34797" fg:w="8"/><text x="82.5455%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (8 samples, 0.02%)</title><rect x="82.2955%" y="53" width="0.0189%" height="15" fill="rgb(247,173,49)" fg:x="34797" fg:w="8"/><text x="82.5455%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.03%)</title><rect x="82.2955%" y="85" width="0.0260%" height="15" fill="rgb(224,114,35)" fg:x="34797" fg:w="11"/><text x="82.5455%" y="95.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 0.03%)</title><rect x="82.2955%" y="149" width="0.0284%" height="15" fill="rgb(245,159,27)" fg:x="34797" fg:w="12"/><text x="82.5455%" y="159.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (12 samples, 0.03%)</title><rect x="82.2955%" y="133" width="0.0284%" height="15" fill="rgb(245,172,44)" fg:x="34797" fg:w="12"/><text x="82.5455%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (12 samples, 0.03%)</title><rect x="82.2955%" y="117" width="0.0284%" height="15" fill="rgb(236,23,11)" fg:x="34797" fg:w="12"/><text x="82.5455%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (12 samples, 0.03%)</title><rect x="82.2955%" y="101" width="0.0284%" height="15" fill="rgb(205,117,38)" fg:x="34797" fg:w="12"/><text x="82.5455%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (143 samples, 0.34%)</title><rect x="82.3664%" y="101" width="0.3382%" height="15" fill="rgb(237,72,25)" fg:x="34827" fg:w="143"/><text x="82.6164%" y="111.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::split_into_chunks (4,983 samples, 11.78%)</title><rect x="70.9458%" y="165" width="11.7849%" height="15" fill="rgb(244,70,9)" fg:x="29998" fg:w="4983"/><text x="71.1958%" y="175.50">flamegraph_benchm..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (172 samples, 0.41%)</title><rect x="82.3239%" y="149" width="0.4068%" height="15" fill="rgb(217,125,39)" fg:x="34809" fg:w="172"/><text x="82.5739%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (167 samples, 0.39%)</title><rect x="82.3357%" y="133" width="0.3950%" height="15" fill="rgb(235,36,10)" fg:x="34814" fg:w="167"/><text x="82.5857%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (160 samples, 0.38%)</title><rect x="82.3522%" y="117" width="0.3784%" height="15" fill="rgb(251,123,47)" fg:x="34821" fg:w="160"/><text x="82.6022%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.02%)</title><rect x="82.7094%" y="101" width="0.0213%" height="15" fill="rgb(221,13,13)" fg:x="34972" fg:w="9"/><text x="82.9594%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.01%)</title><rect x="82.7543%" y="165" width="0.0118%" height="15" fill="rgb(238,131,9)" fg:x="34991" fg:w="5"/><text x="83.0043%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.03%)</title><rect x="82.8962%" y="133" width="0.0331%" height="15" fill="rgb(211,50,8)" fg:x="35051" fg:w="14"/><text x="83.1462%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.05%)</title><rect x="82.9553%" y="117" width="0.0473%" height="15" fill="rgb(245,182,24)" fg:x="35076" fg:w="20"/><text x="83.2053%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.02%)</title><rect x="83.0026%" y="117" width="0.0189%" height="15" fill="rgb(242,14,37)" fg:x="35096" fg:w="8"/><text x="83.2526%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.02%)</title><rect x="83.0334%" y="85" width="0.0166%" height="15" fill="rgb(246,228,12)" fg:x="35109" fg:w="7"/><text x="83.2834%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.07%)</title><rect x="83.0215%" y="117" width="0.0710%" height="15" fill="rgb(213,55,15)" fg:x="35104" fg:w="30"/><text x="83.2715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.06%)</title><rect x="83.0334%" y="101" width="0.0591%" height="15" fill="rgb(209,9,3)" fg:x="35109" fg:w="25"/><text x="83.2834%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.04%)</title><rect x="83.0499%" y="85" width="0.0426%" height="15" fill="rgb(230,59,30)" fg:x="35116" fg:w="18"/><text x="83.2999%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (74 samples, 0.18%)</title><rect x="82.9293%" y="133" width="0.1750%" height="15" fill="rgb(209,121,21)" fg:x="35065" fg:w="74"/><text x="83.1793%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (18 samples, 0.04%)</title><rect x="83.1138%" y="133" width="0.0426%" height="15" fill="rgb(220,109,13)" fg:x="35143" fg:w="18"/><text x="83.3638%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (15 samples, 0.04%)</title><rect x="83.2155%" y="117" width="0.0355%" height="15" fill="rgb(232,18,1)" fg:x="35186" fg:w="15"/><text x="83.4655%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.03%)</title><rect x="83.3314%" y="101" width="0.0284%" height="15" fill="rgb(215,41,42)" fg:x="35235" fg:w="12"/><text x="83.5814%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (57 samples, 0.13%)</title><rect x="83.2533%" y="117" width="0.1348%" height="15" fill="rgb(224,123,36)" fg:x="35202" fg:w="57"/><text x="83.5033%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.02%)</title><rect x="83.3668%" y="101" width="0.0213%" height="15" fill="rgb(240,125,3)" fg:x="35250" fg:w="9"/><text x="83.6168%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.03%)</title><rect x="83.3881%" y="117" width="0.0284%" height="15" fill="rgb(205,98,50)" fg:x="35259" fg:w="12"/><text x="83.6381%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.02%)</title><rect x="83.3976%" y="101" width="0.0189%" height="15" fill="rgb(205,185,37)" fg:x="35263" fg:w="8"/><text x="83.6476%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.01%)</title><rect x="83.4165%" y="117" width="0.0118%" height="15" fill="rgb(238,207,15)" fg:x="35271" fg:w="5"/><text x="83.6665%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (11 samples, 0.03%)</title><rect x="83.4307%" y="117" width="0.0260%" height="15" fill="rgb(213,199,42)" fg:x="35277" fg:w="11"/><text x="83.6807%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.02%)</title><rect x="83.4567%" y="117" width="0.0189%" height="15" fill="rgb(235,201,11)" fg:x="35288" fg:w="8"/><text x="83.7067%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (11 samples, 0.03%)</title><rect x="83.4756%" y="117" width="0.0260%" height="15" fill="rgb(207,46,11)" fg:x="35296" fg:w="11"/><text x="83.7256%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (90 samples, 0.21%)</title><rect x="83.5679%" y="101" width="0.2129%" height="15" fill="rgb(241,35,35)" fg:x="35335" fg:w="90"/><text x="83.8179%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (127 samples, 0.30%)</title><rect x="83.5016%" y="117" width="0.3004%" height="15" fill="rgb(243,32,47)" fg:x="35307" fg:w="127"/><text x="83.7516%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (7 samples, 0.02%)</title><rect x="83.8257%" y="101" width="0.0166%" height="15" fill="rgb(247,202,23)" fg:x="35444" fg:w="7"/><text x="84.0757%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (60 samples, 0.14%)</title><rect x="83.9132%" y="69" width="0.1419%" height="15" fill="rgb(219,102,11)" fg:x="35481" fg:w="60"/><text x="84.1632%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (165 samples, 0.39%)</title><rect x="83.8020%" y="117" width="0.3902%" height="15" fill="rgb(243,110,44)" fg:x="35434" fg:w="165"/><text x="84.0520%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (147 samples, 0.35%)</title><rect x="83.8446%" y="101" width="0.3477%" height="15" fill="rgb(222,74,54)" fg:x="35452" fg:w="147"/><text x="84.0946%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (136 samples, 0.32%)</title><rect x="83.8706%" y="85" width="0.3216%" height="15" fill="rgb(216,99,12)" fg:x="35463" fg:w="136"/><text x="84.1206%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (56 samples, 0.13%)</title><rect x="84.0598%" y="69" width="0.1324%" height="15" fill="rgb(226,22,26)" fg:x="35543" fg:w="56"/><text x="84.3098%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.07%)</title><rect x="84.1922%" y="117" width="0.0662%" height="15" fill="rgb(217,163,10)" fg:x="35599" fg:w="28"/><text x="84.4422%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (23 samples, 0.05%)</title><rect x="84.2041%" y="101" width="0.0544%" height="15" fill="rgb(213,25,53)" fg:x="35604" fg:w="23"/><text x="84.4541%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.03%)</title><rect x="84.2797%" y="101" width="0.0284%" height="15" fill="rgb(252,105,26)" fg:x="35636" fg:w="12"/><text x="84.5297%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (23 samples, 0.05%)</title><rect x="84.2608%" y="117" width="0.0544%" height="15" fill="rgb(220,39,43)" fg:x="35628" fg:w="23"/><text x="84.5108%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (499 samples, 1.18%)</title><rect x="83.1611%" y="133" width="1.1801%" height="15" fill="rgb(229,68,48)" fg:x="35163" fg:w="499"/><text x="83.4111%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.03%)</title><rect x="84.3152%" y="117" width="0.0260%" height="15" fill="rgb(252,8,32)" fg:x="35651" fg:w="11"/><text x="84.5652%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.01%)</title><rect x="84.3412%" y="133" width="0.0142%" height="15" fill="rgb(223,20,43)" fg:x="35662" fg:w="6"/><text x="84.5912%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (891 samples, 2.11%)</title><rect x="82.8087%" y="149" width="2.1072%" height="15" fill="rgb(229,81,49)" fg:x="35014" fg:w="891"/><text x="83.0587%" y="159.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (235 samples, 0.56%)</title><rect x="84.3601%" y="133" width="0.5558%" height="15" fill="rgb(236,28,36)" fg:x="35670" fg:w="235"/><text x="84.6101%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (6 samples, 0.01%)</title><rect x="84.9159%" y="149" width="0.0142%" height="15" fill="rgb(249,185,26)" fg:x="35905" fg:w="6"/><text x="85.1659%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.03%)</title><rect x="84.9301%" y="149" width="0.0331%" height="15" fill="rgb(249,174,33)" fg:x="35911" fg:w="14"/><text x="85.1801%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (8 samples, 0.02%)</title><rect x="84.9632%" y="149" width="0.0189%" height="15" fill="rgb(233,201,37)" fg:x="35925" fg:w="8"/><text x="85.2132%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.02%)</title><rect x="84.9821%" y="149" width="0.0189%" height="15" fill="rgb(221,78,26)" fg:x="35933" fg:w="8"/><text x="85.2321%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (993 samples, 2.35%)</title><rect x="82.7661%" y="165" width="2.3485%" height="15" fill="rgb(250,127,30)" fg:x="34996" fg:w="993"/><text x="83.0161%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (48 samples, 0.11%)</title><rect x="85.0011%" y="149" width="0.1135%" height="15" fill="rgb(230,49,44)" fg:x="35941" fg:w="48"/><text x="85.2511%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (43 samples, 0.10%)</title><rect x="85.0129%" y="133" width="0.1017%" height="15" fill="rgb(229,67,23)" fg:x="35946" fg:w="43"/><text x="85.2629%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (24 samples, 0.06%)</title><rect x="85.1146%" y="165" width="0.0568%" height="15" fill="rgb(249,83,47)" fg:x="35989" fg:w="24"/><text x="85.3646%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (113 samples, 0.27%)</title><rect x="85.1737%" y="149" width="0.2672%" height="15" fill="rgb(215,43,3)" fg:x="36014" fg:w="113"/><text x="85.4237%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (7 samples, 0.02%)</title><rect x="85.4433%" y="149" width="0.0166%" height="15" fill="rgb(238,154,13)" fg:x="36128" fg:w="7"/><text x="85.6933%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.02%)</title><rect x="85.4433%" y="133" width="0.0166%" height="15" fill="rgb(219,56,2)" fg:x="36128" fg:w="7"/><text x="85.6933%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (128 samples, 0.30%)</title><rect x="85.1713%" y="165" width="0.3027%" height="15" fill="rgb(233,0,4)" fg:x="36013" fg:w="128"/><text x="85.4213%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (6 samples, 0.01%)</title><rect x="85.4599%" y="149" width="0.0142%" height="15" fill="rgb(235,30,7)" fg:x="36135" fg:w="6"/><text x="85.7099%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.01%)</title><rect x="85.4599%" y="133" width="0.0142%" height="15" fill="rgb(250,79,13)" fg:x="36135" fg:w="6"/><text x="85.7099%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (12 samples, 0.03%)</title><rect x="85.6964%" y="149" width="0.0284%" height="15" fill="rgb(211,146,34)" fg:x="36235" fg:w="12"/><text x="85.9464%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (10 samples, 0.02%)</title><rect x="85.7011%" y="133" width="0.0237%" height="15" fill="rgb(228,22,38)" fg:x="36237" fg:w="10"/><text x="85.9511%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (328 samples, 0.78%)</title><rect x="85.7248%" y="149" width="0.7757%" height="15" fill="rgb(235,168,5)" fg:x="36247" fg:w="328"/><text x="85.9748%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (67 samples, 0.16%)</title><rect x="86.5099%" y="149" width="0.1585%" height="15" fill="rgb(221,155,16)" fg:x="36579" fg:w="67"/><text x="86.7599%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (250 samples, 0.59%)</title><rect x="86.6755%" y="149" width="0.5913%" height="15" fill="rgb(215,215,53)" fg:x="36649" fg:w="250"/><text x="86.9255%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (245 samples, 0.58%)</title><rect x="86.6873%" y="133" width="0.5794%" height="15" fill="rgb(223,4,10)" fg:x="36654" fg:w="245"/><text x="86.9373%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (243 samples, 0.57%)</title><rect x="87.2809%" y="133" width="0.5747%" height="15" fill="rgb(234,103,6)" fg:x="36905" fg:w="243"/><text x="87.5309%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1,015 samples, 2.40%)</title><rect x="85.4741%" y="165" width="2.4005%" height="15" fill="rgb(227,97,0)" fg:x="36141" fg:w="1015"/><text x="85.7241%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (257 samples, 0.61%)</title><rect x="87.2668%" y="149" width="0.6078%" height="15" fill="rgb(234,150,53)" fg:x="36899" fg:w="257"/><text x="87.5168%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (5 samples, 0.01%)</title><rect x="87.8627%" y="133" width="0.0118%" height="15" fill="rgb(228,201,54)" fg:x="37151" fg:w="5"/><text x="88.1127%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (67 samples, 0.16%)</title><rect x="87.8746%" y="165" width="0.1585%" height="15" fill="rgb(222,22,37)" fg:x="37156" fg:w="67"/><text x="88.1246%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (67 samples, 0.16%)</title><rect x="87.8746%" y="149" width="0.1585%" height="15" fill="rgb(237,53,32)" fg:x="37156" fg:w="67"/><text x="88.1246%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (12 samples, 0.03%)</title><rect x="88.0330%" y="165" width="0.0284%" height="15" fill="rgb(233,25,53)" fg:x="37223" fg:w="12"/><text x="88.2830%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.03%)</title><rect x="88.0614%" y="165" width="0.0307%" height="15" fill="rgb(210,40,34)" fg:x="37235" fg:w="13"/><text x="88.3114%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.01%)</title><rect x="88.1111%" y="165" width="0.0118%" height="15" fill="rgb(241,220,44)" fg:x="37256" fg:w="5"/><text x="88.3611%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (31 samples, 0.07%)</title><rect x="88.2057%" y="117" width="0.0733%" height="15" fill="rgb(235,28,35)" fg:x="37296" fg:w="31"/><text x="88.4557%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (70 samples, 0.17%)</title><rect x="88.1229%" y="165" width="0.1656%" height="15" fill="rgb(210,56,17)" fg:x="37261" fg:w="70"/><text x="88.3729%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (64 samples, 0.15%)</title><rect x="88.1371%" y="149" width="0.1514%" height="15" fill="rgb(224,130,29)" fg:x="37267" fg:w="64"/><text x="88.3871%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (49 samples, 0.12%)</title><rect x="88.1726%" y="133" width="0.1159%" height="15" fill="rgb(235,212,8)" fg:x="37282" fg:w="49"/><text x="88.4226%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.02%)</title><rect x="88.2884%" y="165" width="0.0166%" height="15" fill="rgb(223,33,50)" fg:x="37331" fg:w="7"/><text x="88.5384%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (698 samples, 1.65%)</title><rect x="88.3121%" y="165" width="1.6508%" height="15" fill="rgb(219,149,13)" fg:x="37341" fg:w="698"/><text x="88.5621%" y="175.50"></text></g><g><title>flamegraph_benchmark`flamegraph_benchmark::main (38,764 samples, 91.68%)</title><rect x="1.0477%" y="181" width="91.6775%" height="15" fill="rgb(250,156,29)" fg:x="443" fg:w="38764"/><text x="1.2977%" y="191.50">flamegraph_benchmark`flamegraph_benchmark::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,168 samples, 2.76%)</title><rect x="89.9629%" y="165" width="2.7623%" height="15" fill="rgb(216,193,19)" fg:x="38039" fg:w="1168"/><text x="90.2129%" y="175.50">li..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::get_block (49 samples, 0.12%)</title><rect x="92.7252%" y="181" width="0.1159%" height="15" fill="rgb(216,135,14)" fg:x="39207" fg:w="49"/><text x="92.9752%" y="191.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block (274 samples, 0.65%)</title><rect x="92.8411%" y="181" width="0.6480%" height="15" fill="rgb(241,47,5)" fg:x="39256" fg:w="274"/><text x="93.0911%" y="191.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (249 samples, 0.59%)</title><rect x="93.4891%" y="181" width="0.5889%" height="15" fill="rgb(233,42,35)" fg:x="39530" fg:w="249"/><text x="93.7391%" y="191.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::set_block (261 samples, 0.62%)</title><rect x="94.0780%" y="181" width="0.6173%" height="15" fill="rgb(231,13,6)" fg:x="39779" fg:w="261"/><text x="94.3280%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (13 samples, 0.03%)</title><rect x="94.6953%" y="181" width="0.0307%" height="15" fill="rgb(207,181,40)" fg:x="40040" fg:w="13"/><text x="94.9453%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.02%)</title><rect x="94.7260%" y="181" width="0.0189%" height="15" fill="rgb(254,173,49)" fg:x="40053" fg:w="8"/><text x="94.9760%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.02%)</title><rect x="94.7449%" y="181" width="0.0237%" height="15" fill="rgb(221,1,38)" fg:x="40061" fg:w="10"/><text x="94.9949%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (15 samples, 0.04%)</title><rect x="94.7686%" y="181" width="0.0355%" height="15" fill="rgb(206,124,46)" fg:x="40071" fg:w="15"/><text x="95.0186%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (10 samples, 0.02%)</title><rect x="94.8041%" y="181" width="0.0237%" height="15" fill="rgb(249,21,11)" fg:x="40086" fg:w="10"/><text x="95.0541%" y="191.50"></text></g><g><title>dyld`start (40,262 samples, 95.22%)</title><rect x="0.0000%" y="229" width="95.2203%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="40262"/><text x="0.2500%" y="239.50">dyld`start</text></g><g><title>flamegraph_benchmark`main (40,262 samples, 95.22%)</title><rect x="0.0000%" y="213" width="95.2203%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="40262"/><text x="0.2500%" y="223.50">flamegraph_benchmark`main</text></g><g><title>flamegraph_benchmark`std::sys::backtrace::__rust_begin_short_backtrace (40,262 samples, 95.22%)</title><rect x="0.0000%" y="197" width="95.2203%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="40262"/><text x="0.2500%" y="207.50">flamegraph_benchmark`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (161 samples, 0.38%)</title><rect x="94.8395%" y="181" width="0.3808%" height="15" fill="rgb(222,56,46)" fg:x="40101" fg:w="161"/><text x="95.0895%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (13 samples, 0.03%)</title><rect x="98.4935%" y="117" width="0.0307%" height="15" fill="rgb(239,76,54)" fg:x="41646" fg:w="13"/><text x="98.7435%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.03%)</title><rect x="98.4958%" y="101" width="0.0284%" height="15" fill="rgb(231,124,27)" fg:x="41647" fg:w="12"/><text x="98.7458%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (42 samples, 0.10%)</title><rect x="98.4746%" y="133" width="0.0993%" height="15" fill="rgb(249,195,6)" fg:x="41638" fg:w="42"/><text x="98.7246%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (21 samples, 0.05%)</title><rect x="98.5242%" y="117" width="0.0497%" height="15" fill="rgb(237,174,47)" fg:x="41659" fg:w="21"/><text x="98.7742%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (21 samples, 0.05%)</title><rect x="98.5242%" y="101" width="0.0497%" height="15" fill="rgb(206,201,31)" fg:x="41659" fg:w="21"/><text x="98.7742%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (22 samples, 0.05%)</title><rect x="98.5834%" y="85" width="0.0520%" height="15" fill="rgb(231,57,52)" fg:x="41684" fg:w="22"/><text x="98.8334%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (69 samples, 0.16%)</title><rect x="98.4746%" y="149" width="0.1632%" height="15" fill="rgb(248,177,22)" fg:x="41638" fg:w="69"/><text x="98.7246%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.06%)</title><rect x="98.5763%" y="133" width="0.0615%" height="15" fill="rgb(215,211,37)" fg:x="41681" fg:w="26"/><text x="98.8263%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.06%)</title><rect x="98.5810%" y="117" width="0.0568%" height="15" fill="rgb(241,128,51)" fg:x="41683" fg:w="24"/><text x="98.8310%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (24 samples, 0.06%)</title><rect x="98.5810%" y="101" width="0.0568%" height="15" fill="rgb(227,165,31)" fg:x="41683" fg:w="24"/><text x="98.8310%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (224 samples, 0.53%)</title><rect x="98.4698%" y="165" width="0.5298%" height="15" fill="rgb(228,167,24)" fg:x="41636" fg:w="224"/><text x="98.7198%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (153 samples, 0.36%)</title><rect x="98.6378%" y="149" width="0.3618%" height="15" fill="rgb(228,143,12)" fg:x="41707" fg:w="153"/><text x="98.8878%" y="159.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (230 samples, 0.54%)</title><rect x="98.4604%" y="213" width="0.5440%" height="15" fill="rgb(249,149,8)" fg:x="41632" fg:w="230"/><text x="98.7104%" y="223.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (230 samples, 0.54%)</title><rect x="98.4604%" y="197" width="0.5440%" height="15" fill="rgb(243,35,44)" fg:x="41632" fg:w="230"/><text x="98.7104%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (228 samples, 0.54%)</title><rect x="98.4651%" y="181" width="0.5392%" height="15" fill="rgb(246,89,9)" fg:x="41634" fg:w="228"/><text x="98.7151%" y="191.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::schematic::parse_block_data (82 samples, 0.19%)</title><rect x="99.0043%" y="213" width="0.1939%" height="15" fill="rgb(233,213,13)" fg:x="41862" fg:w="82"/><text x="99.2543%" y="223.50"></text></g><g><title>flamegraph_benchmark`flate2::crc::Crc::update (23 samples, 0.05%)</title><rect x="99.2006%" y="181" width="0.0544%" height="15" fill="rgb(233,141,41)" fg:x="41945" fg:w="23"/><text x="99.4506%" y="191.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::stream::inflate_loop (48 samples, 0.11%)</title><rect x="99.2550%" y="149" width="0.1135%" height="15" fill="rgb(239,167,4)" fg:x="41968" fg:w="48"/><text x="99.5050%" y="159.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::decompress (48 samples, 0.11%)</title><rect x="99.2550%" y="133" width="0.1135%" height="15" fill="rgb(209,217,16)" fg:x="41968" fg:w="48"/><text x="99.5050%" y="143.50"></text></g><g><title>flamegraph_benchmark`miniz_oxide::inflate::core::transfer (44 samples, 0.10%)</title><rect x="99.2645%" y="117" width="0.1041%" height="15" fill="rgb(219,88,35)" fg:x="41972" fg:w="44"/><text x="99.5145%" y="127.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (87 samples, 0.21%)</title><rect x="99.2006%" y="213" width="0.2058%" height="15" fill="rgb(220,193,23)" fg:x="41945" fg:w="87"/><text x="99.4506%" y="223.50"></text></g><g><title>flamegraph_benchmark`quartz_nbt::io::read_tag_body_const (87 samples, 0.21%)</title><rect x="99.2006%" y="197" width="0.2058%" height="15" fill="rgb(230,90,52)" fg:x="41945" fg:w="87"/><text x="99.4506%" y="207.50"></text></g><g><title>flamegraph_benchmark`std::io::default_read_exact (64 samples, 0.15%)</title><rect x="99.2550%" y="181" width="0.1514%" height="15" fill="rgb(252,106,19)" fg:x="41968" fg:w="64"/><text x="99.5050%" y="191.50"></text></g><g><title>flamegraph_benchmark`&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (64 samples, 0.15%)</title><rect x="99.2550%" y="165" width="0.1514%" height="15" fill="rgb(206,74,20)" fg:x="41968" fg:w="64"/><text x="99.5050%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.04%)</title><rect x="99.3685%" y="149" width="0.0378%" height="15" fill="rgb(230,138,44)" fg:x="42016" fg:w="16"/><text x="99.6185%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (134 samples, 0.32%)</title><rect x="99.4064%" y="197" width="0.3169%" height="15" fill="rgb(235,182,43)" fg:x="42032" fg:w="134"/><text x="99.6564%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_find_by_ptr (5 samples, 0.01%)</title><rect x="99.7233%" y="197" width="0.0118%" height="15" fill="rgb(242,16,51)" fg:x="42166" fg:w="5"/><text x="99.9733%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (18 samples, 0.04%)</title><rect x="99.7351%" y="197" width="0.0426%" height="15" fill="rgb(248,9,4)" fg:x="42171" fg:w="18"/><text x="99.9851%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.03%)</title><rect x="99.7493%" y="181" width="0.0284%" height="15" fill="rgb(210,31,22)" fg:x="42177" fg:w="12"/><text x="99.9993%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (174 samples, 0.41%)</title><rect x="99.4064%" y="213" width="0.4115%" height="15" fill="rgb(239,54,39)" fg:x="42032" fg:w="174"/><text x="99.6564%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (17 samples, 0.04%)</title><rect x="99.7777%" y="197" width="0.0402%" height="15" fill="rgb(230,99,41)" fg:x="42189" fg:w="17"/><text x="100.0277%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.04%)</title><rect x="99.7777%" y="181" width="0.0402%" height="15" fill="rgb(253,106,12)" fg:x="42189" fg:w="17"/><text x="100.0277%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.06%)</title><rect x="99.8250%" y="213" width="0.0568%" height="15" fill="rgb(213,46,41)" fg:x="42209" fg:w="24"/><text x="100.0750%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.05%)</title><rect x="99.8321%" y="197" width="0.0497%" height="15" fill="rgb(215,133,35)" fg:x="42212" fg:w="21"/><text x="100.0821%" y="207.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::schematic::from_schematic (2,013 samples, 4.76%)</title><rect x="95.2227%" y="229" width="4.7608%" height="15" fill="rgb(213,28,5)" fg:x="40263" fg:w="2013"/><text x="95.4727%" y="239.50">flameg..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (43 samples, 0.10%)</title><rect x="99.8817%" y="213" width="0.1017%" height="15" fill="rgb(215,77,49)" fg:x="42233" fg:w="43"/><text x="100.1317%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.01%)</title><rect x="99.9834%" y="229" width="0.0118%" height="15" fill="rgb(248,100,22)" fg:x="42276" fg:w="5"/><text x="100.2334%" y="239.50"></text></g><g><title>all (42,283 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="42283"/><text x="0.2500%" y="255.50"></text></g></svg></svg>