<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="213.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="213.00"> </text><svg id="frames" x="10" width="1180" total_samples="44742"><g><title>flamegraph_benchmark`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (162 samples, 0.36%)</title><rect x="1.7791%" y="101" width="0.3621%" height="15" fill="rgb(227,0,7)" fg:x="796" fg:w="162"/><text x="2.0291%" y="111.50"></text></g><g><title>flamegraph_benchmark`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::cmp::PartialEq&gt;::eq (585 samples, 1.31%)</title><rect x="2.1412%" y="101" width="1.3075%" height="15" fill="rgb(217,0,24)" fg:x="958" fg:w="585"/><text x="2.3912%" y="111.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (721 samples, 1.61%)</title><rect x="3.4487%" y="101" width="1.6115%" height="15" fill="rgb(221,193,54)" fg:x="1543" fg:w="721"/><text x="3.6987%" y="111.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$memcmp (681 samples, 1.52%)</title><rect x="5.0601%" y="101" width="1.5221%" height="15" fill="rgb(248,212,6)" fg:x="2264" fg:w="681"/><text x="5.3101%" y="111.50"></text></g><g><title>flamegraph_benchmark`core::hash::BuildHasher::hash_one (75 samples, 0.17%)</title><rect x="6.5822%" y="101" width="0.1676%" height="15" fill="rgb(208,68,35)" fg:x="2945" fg:w="75"/><text x="6.8322%" y="111.50"></text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (804 samples, 1.80%)</title><rect x="6.7498%" y="101" width="1.7970%" height="15" fill="rgb(232,128,0)" fg:x="3020" fg:w="804"/><text x="6.9998%" y="111.50">f..</text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTableInner::drop_inner_table (685 samples, 1.53%)</title><rect x="8.5468%" y="101" width="1.5310%" height="15" fill="rgb(207,160,47)" fg:x="3824" fg:w="685"/><text x="8.7968%" y="111.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$malloc (60 samples, 0.13%)</title><rect x="13.7410%" y="53" width="0.1341%" height="15" fill="rgb(228,23,34)" fg:x="6148" fg:w="60"/><text x="13.9910%" y="63.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (803 samples, 1.79%)</title><rect x="13.8751%" y="53" width="1.7947%" height="15" fill="rgb(218,30,26)" fg:x="6208" fg:w="803"/><text x="14.1251%" y="63.50">f..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (716 samples, 1.60%)</title><rect x="14.0696%" y="37" width="1.6003%" height="15" fill="rgb(220,122,19)" fg:x="6295" fg:w="716"/><text x="14.3196%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (291 samples, 0.65%)</title><rect x="15.6698%" y="53" width="0.6504%" height="15" fill="rgb(250,228,42)" fg:x="7011" fg:w="291"/><text x="15.9198%" y="63.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,308 samples, 2.92%)</title><rect x="13.3990%" y="69" width="2.9234%" height="15" fill="rgb(240,193,28)" fg:x="5995" fg:w="1308"/><text x="13.6490%" y="79.50">fl..</text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (65 samples, 0.15%)</title><rect x="16.3225%" y="69" width="0.1453%" height="15" fill="rgb(216,20,37)" fg:x="7303" fg:w="65"/><text x="16.5725%" y="79.50"></text></g><g><title>flamegraph_benchmark`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,458 samples, 7.73%)</title><rect x="10.2119%" y="85" width="7.7288%" height="15" fill="rgb(206,188,39)" fg:x="4569" fg:w="3458"/><text x="10.4619%" y="95.50">flamegraph_..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (659 samples, 1.47%)</title><rect x="16.4677%" y="69" width="1.4729%" height="15" fill="rgb(217,207,13)" fg:x="7368" fg:w="659"/><text x="16.7177%" y="79.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$free (53 samples, 0.12%)</title><rect x="17.9406%" y="85" width="0.1185%" height="15" fill="rgb(231,73,38)" fg:x="8027" fg:w="53"/><text x="18.1906%" y="95.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (93 samples, 0.21%)</title><rect x="18.0591%" y="85" width="0.2079%" height="15" fill="rgb(225,20,46)" fg:x="8080" fg:w="93"/><text x="18.3091%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_free (302 samples, 0.67%)</title><rect x="18.2759%" y="85" width="0.6750%" height="15" fill="rgb(210,31,41)" fg:x="8177" fg:w="302"/><text x="18.5259%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (105 samples, 0.23%)</title><rect x="18.9509%" y="85" width="0.2347%" height="15" fill="rgb(221,200,47)" fg:x="8479" fg:w="105"/><text x="19.2009%" y="95.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::schematic::to_schematic (4,453 samples, 9.95%)</title><rect x="10.0778%" y="101" width="9.9526%" height="15" fill="rgb(226,26,5)" fg:x="4509" fg:w="4453"/><text x="10.3278%" y="111.50">flamegraph_ben..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (378 samples, 0.84%)</title><rect x="19.1856%" y="85" width="0.8448%" height="15" fill="rgb(249,33,26)" fg:x="8584" fg:w="378"/><text x="19.4356%" y="95.50"></text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (760 samples, 1.70%)</title><rect x="30.1618%" y="85" width="1.6986%" height="15" fill="rgb(235,183,28)" fg:x="13495" fg:w="760"/><text x="30.4118%" y="95.50"></text></g><g><title>flamegraph_benchmark`&lt;minecraft_schematic_utils::block_state::BlockState as core::hash::Hash&gt;::hash (1,351 samples, 3.02%)</title><rect x="31.8604%" y="85" width="3.0195%" height="15" fill="rgb(221,5,38)" fg:x="14255" fg:w="1351"/><text x="32.1104%" y="95.50">fla..</text></g><g><title>flamegraph_benchmark`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (544 samples, 1.22%)</title><rect x="33.6641%" y="69" width="1.2159%" height="15" fill="rgb(247,18,42)" fg:x="15062" fg:w="544"/><text x="33.9141%" y="79.50"></text></g><g><title>flamegraph_benchmark`core::hash::Hasher::write_str (3,385 samples, 7.57%)</title><rect x="34.8800%" y="85" width="7.5656%" height="15" fill="rgb(241,131,45)" fg:x="15606" fg:w="3385"/><text x="35.1300%" y="95.50">flamegraph..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block (10,348 samples, 23.13%)</title><rect x="20.0304%" y="101" width="23.1282%" height="15" fill="rgb(249,31,29)" fg:x="8962" fg:w="10348"/><text x="20.2804%" y="111.50">flamegraph_benchmark`minecraft_schema..</text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTableInner::drop_inner_table (319 samples, 0.71%)</title><rect x="42.4456%" y="85" width="0.7130%" height="15" fill="rgb(225,111,53)" fg:x="18991" fg:w="319"/><text x="42.6956%" y="95.50"></text></g><g><title>flamegraph_benchmark`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.01%)</title><rect x="57.9366%" y="69" width="0.0112%" height="15" fill="rgb(238,160,17)" fg:x="25922" fg:w="5"/><text x="58.1866%" y="79.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (6,785 samples, 15.16%)</title><rect x="43.1586%" y="101" width="15.1647%" height="15" fill="rgb(214,148,48)" fg:x="19310" fg:w="6785"/><text x="43.4086%" y="111.50">flamegraph_benchmark`mi..</text></g><g><title>flamegraph_benchmark`hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (391 samples, 0.87%)</title><rect x="57.4494%" y="85" width="0.8739%" height="15" fill="rgb(232,36,49)" fg:x="25704" fg:w="391"/><text x="57.6994%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (168 samples, 0.38%)</title><rect x="57.9478%" y="69" width="0.3755%" height="15" fill="rgb(209,103,24)" fg:x="25927" fg:w="168"/><text x="58.1978%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (163 samples, 0.36%)</title><rect x="57.9590%" y="53" width="0.3643%" height="15" fill="rgb(229,88,8)" fg:x="25932" fg:w="163"/><text x="58.2090%" y="63.50"></text></g><g><title>flamegraph_benchmark`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,157 samples, 9.29%)</title><rect x="62.3642%" y="85" width="9.2910%" height="15" fill="rgb(213,181,19)" fg:x="27903" fg:w="4157"/><text x="62.6142%" y="95.50">flamegraph_be..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::set_block (9,788 samples, 21.88%)</title><rect x="58.3233%" y="101" width="21.8765%" height="15" fill="rgb(254,191,54)" fg:x="26095" fg:w="9788"/><text x="58.5733%" y="111.50">flamegraph_benchmark`minecraft_sche..</text></g><g><title>flamegraph_benchmark`core::hash::BuildHasher::hash_one (3,823 samples, 8.54%)</title><rect x="71.6553%" y="85" width="8.5445%" height="15" fill="rgb(241,83,37)" fg:x="32060" fg:w="3823"/><text x="71.9053%" y="95.50">flamegraph_b..</text></g><g><title>flamegraph_benchmark`flamegraph_benchmark::main (38,580 samples, 86.23%)</title><rect x="0.0000%" y="117" width="86.2277%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="38580"/><text x="0.2500%" y="127.50">flamegraph_benchmark`flamegraph_benchmark::main</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2,697 samples, 6.03%)</title><rect x="80.1998%" y="101" width="6.0279%" height="15" fill="rgb(226,3,54)" fg:x="35883" fg:w="2697"/><text x="80.4498%" y="111.50">libsyste..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block (946 samples, 2.11%)</title><rect x="86.2277%" y="117" width="2.1143%" height="15" fill="rgb(245,192,40)" fg:x="38580" fg:w="946"/><text x="86.4777%" y="127.50">f..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::region::Region::set_block_at_index (910 samples, 2.03%)</title><rect x="88.3420%" y="117" width="2.0339%" height="15" fill="rgb(238,167,29)" fg:x="39526" fg:w="910"/><text x="88.5920%" y="127.50">f..</text></g><g><title>dyld`start (41,516 samples, 92.79%)</title><rect x="0.0000%" y="165" width="92.7898%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="41516"/><text x="0.2500%" y="175.50">dyld`start</text></g><g><title>flamegraph_benchmark`main (41,516 samples, 92.79%)</title><rect x="0.0000%" y="149" width="92.7898%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="41516"/><text x="0.2500%" y="159.50">flamegraph_benchmark`main</text></g><g><title>flamegraph_benchmark`std::sys::backtrace::__rust_begin_short_backtrace (41,516 samples, 92.79%)</title><rect x="0.0000%" y="133" width="92.7898%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="41516"/><text x="0.2500%" y="143.50">flamegraph_benchmark`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::set_block (1,080 samples, 2.41%)</title><rect x="90.3759%" y="117" width="2.4138%" height="15" fill="rgb(235,93,37)" fg:x="40436" fg:w="1080"/><text x="90.6259%" y="127.50">fl..</text></g><g><title>flamegraph_benchmark`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 0.21%)</title><rect x="92.7898%" y="149" width="0.2146%" height="15" fill="rgb(213,116,39)" fg:x="41516" fg:w="96"/><text x="93.0398%" y="159.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$malloc (36 samples, 0.08%)</title><rect x="95.5433%" y="101" width="0.0805%" height="15" fill="rgb(222,207,29)" fg:x="42748" fg:w="36"/><text x="95.7933%" y="111.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (600 samples, 1.34%)</title><rect x="95.6238%" y="101" width="1.3410%" height="15" fill="rgb(206,96,30)" fg:x="42784" fg:w="600"/><text x="95.8738%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (547 samples, 1.22%)</title><rect x="95.7423%" y="85" width="1.2226%" height="15" fill="rgb(218,138,4)" fg:x="42837" fg:w="547"/><text x="95.9923%" y="95.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (927 samples, 2.07%)</title><rect x="95.3243%" y="117" width="2.0719%" height="15" fill="rgb(250,191,14)" fg:x="42650" fg:w="927"/><text x="95.5743%" y="127.50">f..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (193 samples, 0.43%)</title><rect x="96.9648%" y="101" width="0.4314%" height="15" fill="rgb(239,60,40)" fg:x="43384" fg:w="193"/><text x="97.2148%" y="111.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::finish_grow (44 samples, 0.10%)</title><rect x="97.3962%" y="117" width="0.0983%" height="15" fill="rgb(206,27,48)" fg:x="43577" fg:w="44"/><text x="97.6462%" y="127.50"></text></g><g><title>flamegraph_benchmark`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,396 samples, 5.36%)</title><rect x="93.0937%" y="133" width="5.3551%" height="15" fill="rgb(225,35,8)" fg:x="41652" fg:w="2396"/><text x="93.3437%" y="143.50">flamegr..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (427 samples, 0.95%)</title><rect x="97.4945%" y="117" width="0.9544%" height="15" fill="rgb(250,213,24)" fg:x="43621" fg:w="427"/><text x="97.7445%" y="127.50"></text></g><g><title>flamegraph_benchmark`DYLD-STUB$$free (32 samples, 0.07%)</title><rect x="98.4489%" y="133" width="0.0715%" height="15" fill="rgb(247,123,22)" fg:x="44048" fg:w="32"/><text x="98.6989%" y="143.50"></text></g><g><title>flamegraph_benchmark`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (75 samples, 0.17%)</title><rect x="98.5204%" y="133" width="0.1676%" height="15" fill="rgb(231,138,38)" fg:x="44080" fg:w="75"/><text x="98.7704%" y="143.50"></text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::universal_schematic::UniversalSchematic::get_merged_region (10 samples, 0.02%)</title><rect x="98.6947%" y="133" width="0.0224%" height="15" fill="rgb(231,145,46)" fg:x="44158" fg:w="10"/><text x="98.9447%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.01%)</title><rect x="98.7037%" y="117" width="0.0134%" height="15" fill="rgb(251,118,11)" fg:x="44162" fg:w="6"/><text x="98.9537%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.01%)</title><rect x="98.7059%" y="101" width="0.0112%" height="15" fill="rgb(217,147,25)" fg:x="44163" fg:w="5"/><text x="98.9559%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (224 samples, 0.50%)</title><rect x="98.7171%" y="133" width="0.5006%" height="15" fill="rgb(247,81,37)" fg:x="44168" fg:w="224"/><text x="98.9671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (58 samples, 0.13%)</title><rect x="99.2177%" y="133" width="0.1296%" height="15" fill="rgb(209,12,38)" fg:x="44392" fg:w="58"/><text x="99.4677%" y="143.50"></text></g><g><title>all (44,742 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="44742"/><text x="0.2500%" y="191.50"></text></g><g><title>flamegraph_benchmark`flamegraph_benchmark::main (3,226 samples, 7.21%)</title><rect x="92.7898%" y="165" width="7.2102%" height="15" fill="rgb(248,47,43)" fg:x="41516" fg:w="3226"/><text x="93.0398%" y="175.50">flamegraph..</text></g><g><title>flamegraph_benchmark`minecraft_schematic_utils::formats::schematic::to_schematic (3,130 samples, 7.00%)</title><rect x="93.0043%" y="149" width="6.9957%" height="15" fill="rgb(221,10,30)" fg:x="41612" fg:w="3130"/><text x="93.2543%" y="159.50">flamegrap..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (291 samples, 0.65%)</title><rect x="99.3496%" y="133" width="0.6504%" height="15" fill="rgb(210,229,1)" fg:x="44451" fg:w="291"/><text x="99.5996%" y="143.50"></text></g></svg></svg>