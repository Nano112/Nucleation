name: Nucleation CI/CD

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

###############################################################################
#  1 ── DETECT VERSION BUMP ───────────────────────────────────────────────────
###############################################################################
jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.bump.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }

      - name: Read current version from Cargo.toml
        id: version
        run: |
          echo "version=$(grep -m1 '^version = ' Cargo.toml | cut -d '"' -f2)" >> $GITHUB_OUTPUT

      - name: Decide if we publish a new release
        id: bump
        run: |
          if [[ "${{ github.event_name }}" != "push" ]]; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          CHANGED=$(git diff HEAD^ HEAD --name-only | grep -c "Cargo.toml" || true)
          if [[ $CHANGED -eq 0 ]]; then
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          OLD=$(git show HEAD^:Cargo.toml | grep -m1 '^version = ' | cut -d '"' -f2)
          NEW="${{ steps.version.outputs.version }}"
          [[ "$OLD" != "$NEW" ]] && echo "should_release=true" >> $GITHUB_OUTPUT || \
            echo "should_release=false" >> $GITHUB_OUTPUT

  ###############################################################################
  #  2 ── TEST SUITE (pure Rust) ────────────────────────────────────────────────
  ###############################################################################
  test:
    runs-on: ubuntu-latest
    env: { VERSION: ${{ needs.check-version.outputs.version }} }
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with: { profile: minimal, toolchain: stable, override: true }
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests (all features)
        run: cargo test --all-features

  ###############################################################################
  #  3 ── GENERIC BUILD  (WASM + Node native .so) ───────────────────────────────
  ###############################################################################
  build:
    needs: test
    runs-on: ubuntu-latest
    env: { VERSION: ${{ needs.check-version.outputs.version }} }
    steps:
      - uses: actions/checkout@v4

      # Rust & wasm-bindgen toolchain
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Install wasm-pack
        run: curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

      # ─── Build native (Node) + all features
      - name: Build Rust (native)
        run: cargo build --release --all-features

      # ─── Build WASM bundle (keeps canonical filenames in pkg/)
      - name: Build WASM bundle
        run: |
          chmod +x ./build-wasm.sh
          ./build-wasm.sh

      # ─── Rename artefacts with VERSION and TARGET triple
      - name: Stamp artefacts with version & triple
        run: |
          set -e
          mkdir -p release-artifacts

          # WASM artefacts
          TARGET_WASM=wasm32-unknown-unknown
          for f in pkg/*; do
            base=$(basename "$f")
            ext="${base##*.}"
            stem="${base%.*}"
            cp "$f" "release-artifacts/${stem}-${VERSION}-${TARGET_WASM}.${ext}"
          done

          # Native .so (Linux host)
          LIB=$(echo target/release/libnucleation.* | head -n1)
          if [[ -f "$LIB" ]]; then
            host_triple=$(rustc -vV | awk '/host:/ {print $2}')
            ext="${LIB##*.}"
            cp "$LIB" "release-artifacts/libnucleation-${VERSION}-${host_triple}.${ext}"
          fi

          # Docs, license, readme
          cp README.md LICENSE release-artifacts/

      - name: Upload bundle artefacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-node-${{ env.VERSION }}
          path: release-artifacts

  ###############################################################################
  #  4 ── FFI MATRIX (Linux & macOS) ────────────────────────────────────────────
  ###############################################################################
  build-ffi:
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: so
          - os: macos-13          # Intel
            target: x86_64-apple-darwin
            ext: dylib
          - os: macos-14          # Apple Silicon
            target: aarch64-apple-darwin
            ext: dylib
    runs-on: ${{ matrix.os }}
    env: { VERSION: ${{ needs.check-version.outputs.version }} }
    steps:
      - uses: actions/checkout@v4
      - run: rustup target add ${{ matrix.target }}
      - name: Build FFI library
        run: cargo build --release --target ${{ matrix.target }} --features ffi
      - name: Stamp FFI artefact
        run: |
          mkdir -p release-artifacts
          cp target/${{ matrix.target }}/release/libnucleation.${{ matrix.ext }} \
             release-artifacts/libnucleation-${VERSION}-${{ matrix.target }}.${{ matrix.ext }}
      - name: Upload FFI artefact
        uses: actions/upload-artifact@v4
        with:
          name: ffi-${{ matrix.target }}-${{ env.VERSION }}
          path: release-artifacts

  ###############################################################################
  #  5 ── PUBLISH (when version bump) ───────────────────────────────────────────
  ###############################################################################
  publish:
    needs: [check-version, build, build-ffi]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    env: { VERSION: ${{ needs.check-version.outputs.version }} }
    steps:
      - uses: actions/checkout@v4

      - name: Download artefacts
        uses: actions/download-artifact@v4
        with: { path: release-artifacts }

      # ─── Publish to crates.io ──────────────────────────────────────────────
      - uses: actions-rs/cargo@v1
        with: { command: publish, args: --allow-dirty --token ${{ secrets.CRATES_IO_TOKEN }} }

      # ─── Publish to npm (pkg/ kept vanilla) ───────────────────────────────
      - name: Setup Node
        uses: actions/setup-node@v4
        with: { node-version: '18.x', registry-url: 'https://registry.npmjs.org' }

      - name: Bump version in pkg/package.json & publish
        run: |
          cd pkg
          jq --arg v "$VERSION" '.version = $v' package.json > tmp && mv tmp package.json
          npm publish
        env: { NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} }

      # ─── Publish PyPI wheels via maturin ──────────────────────────────────
      - name: Setup Python
        uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - name: Publish Python wheel
        run: |
          pip install maturin
          maturin publish --features python --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}

      # ─── Create GitHub Release with all artefacts ─────────────────────────
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          generate_release_notes: true
          files: release-artifacts/**
